<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Programming &#8211; Joseph Scott</title>
	<atom:link href="/category/programming/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Wed, 25 May 2005 21:07:10 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>Spell Checking via AJAX</title>
		<link>/2005/05/25/spell-checking-via-ajax/</link>
					<comments>/2005/05/25/spell-checking-via-ajax/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 25 May 2005 21:07:10 +0000</pubDate>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[Web]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2005/05/25/spell-checking-via-ajax/</guid>

					<description><![CDATA[Yes, my wish has come true (at least in part). Someone has put together an AJAX spell checker for forms. There doesn&#8217;t seem to be a specific license included, but hopefully that will get worked out and projects will start making use of this. I&#8217;ve been spoiled by having the ability to spell check form [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Yes, my wish has come true (at least in part).  Someone has put together an <a href="http://www.broken-notebook.com/spell.php">AJAX spell checker for forms</a>.  There doesn&#8217;t seem to be a specific license included, but hopefully that will get worked out and projects will start making use of this.  I&#8217;ve been spoiled by having the ability to spell check form fields in Mac OS X, having this feature on the website itself would make using Windows less painful.</p>
<p>Yes, I know, <a href="http://www.gmail.com/">Gmail</a> already does this, but I want to see it spread into other projects.  Anything where you type significant amount of text should seriously be looking into this.  Along with the ability (should be a requirement I think) to do comment previews in <a href="http://www.wordpress.org/">WordPress</a>, spell checking the comments comes in as a close second on my wish list.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2005/05/25/spell-checking-via-ajax/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Cheat Sheats</title>
		<link>/2005/05/25/cheat-sheats/</link>
					<comments>/2005/05/25/cheat-sheats/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 25 May 2005 17:20:06 +0000</pubDate>
				<category><![CDATA[How To]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Web]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2005/05/25/cheat-sheats/</guid>

					<description><![CDATA[If you haven&#8217;t come across the cheat sheets site for MySQL, PHP, mod_rewrite and CSS then go take a few minutes and check it out. Most of these are things that I usually only often enough that I remember where to look information but not the actual information itself, so these cheat sheets should come [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If you haven&#8217;t come across the <a href="http://www.ilovejackdaniels.com/cheat-sheets/">cheat sheets</a> site for MySQL, PHP, mod_rewrite and CSS then go take a few minutes and check it out.  Most of these are things that I usually only often enough that I remember where to look information but not the actual information itself, so these cheat sheets should come in handy.  I recommend using the PDF versions for printing over the PNG versions, I was able to get much better print quality out of the PDFs.</p>
<p>I&#8217;d love to see a few more these for MS SQL server, Oracle, PostgreSQL and Vim.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2005/05/25/cheat-sheats/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>A Practical Use For AJAX</title>
		<link>/2005/03/23/a-practical-use-for-ajax/</link>
					<comments>/2005/03/23/a-practical-use-for-ajax/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 24 Mar 2005 00:29:42 +0000</pubDate>
				<category><![CDATA[Blogging]]></category>
		<category><![CDATA[Browsers]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Web]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2005/03/23/a-practical-use-for-ajax/</guid>

					<description><![CDATA[The new Google Maps is cool, and so are many of the other sites out there venturing into more client side work (AJAX, if you must, although calling it new is a bit of stretch). But lets face it, how many of them are really practical? One could argue that Gmail is using this for [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>The new <a href="http://maps.google.com/">Google Maps</a> is cool, and so are many of the other sites out there venturing into more client side work (<a href="http://www.adaptivepath.com/publications/essays/archives/000385.php">AJAX</a>, if you must, although calling it new is a bit of stretch).  But lets face it, how many of them are really practical?  One could argue that <a href="http://www.gmail.com/">Gmail</a> is using this for some real down to earth features, but I think you&#8217;ll find that in the minority instead of the majority.  What I&#8217;d like to see this technology being used to replicate more the &#8220;desktop software&#8221; features in web applications.  The example that came to mind is writing blog entries.</p>
<p>I&#8217;m using <a href="http://wordpress.org/">WordPress</a> to manage my blog.  It does a nice enough job for most things, although I still have my gripes.  When I first start an entry in WP I will generally save as a draft after the first few lines to make sure that if something happens I can at least go back to that point.  And I&#8217;ll often hit the &#8220;Save and Continue Editing&#8221; button while composing the rest of the message, for the same reason.  If something goes toes up while I&#8217;m writing my entry (like my network connection), then I want to keep the loss to a minimum.  Hopefully you can already see where I&#8217;m going with this.</p>
<p>With using these client side requests (AJAX), why can&#8217;t we have an autosave feature like with commonly do with word processors?  That should reduce the risk of data loss while editing things online quite a bit (depending on how often you set the system to autosave).  If an error occurred when autosave was doing its thing, then it could pop up a little javascript alert window and let you know that there was a problem.</p>
<p>I haven&#8217;t fully flushed out this idea yet, let alone done anything that would resemble a proof of concept, but it seems like it should be doable.  Who knows, maybe Google will build this into the compose message part of Gmail.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2005/03/23/a-practical-use-for-ajax/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Open Source Code From Google</title>
		<link>/2005/03/17/open-source-code-from-google/</link>
					<comments>/2005/03/17/open-source-code-from-google/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 17 Mar 2005 19:19:39 +0000</pubDate>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[Web]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2005/03/17/open-source-code-from-google/</guid>

					<description><![CDATA[Just in case you haven&#8217;t been keeping up with all of the Google announcements lately, here&#8217;s another code.google.com: new open source. They&#8217;ve released four projects so far at code.google.com, that apparently are used internally at Google and are still in active development. This first batch of projects are all being released under a BSD license, [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Just in case you haven&#8217;t been keeping up with all of the Google announcements lately, here&#8217;s another <a href="http://www.google.com/googleblog/2005/03/codegooglecom-new-open-source.html">code.google.com: new open source</a>.  They&#8217;ve released four projects so far at <a href="http://code.google.com/">code.google.com</a>, that apparently are used internally at Google and are still in active development.  This first batch of projects are all being released under a <a href="http://code.google.com/faq.html#q8">BSD license</a>, nice to see.  A nice start, although it seems like the <a href="http://developer.yahoo.net/">Yahoo Developer Network</a> is a little more well rounded, even if it aiming for a slightly different target.  I&#8217;d love to see Yahoo and Google duke it out to see who can best support developers.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2005/03/17/open-source-code-from-google/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>phpBeans, Hmmmmm.</title>
		<link>/2005/02/11/phpbeans-hmmmmm/</link>
					<comments>/2005/02/11/phpbeans-hmmmmm/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 11 Feb 2005 23:23:09 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Web]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2005/02/11/phpbeans-hmmmmm/</guid>

					<description><![CDATA[If you&#8217;ve been around programming for even a little bit you&#8217;re likely to have seen references to JavaBeans. In an effort to provide a similar remote method invocation (RMI) for PHP there is now a phpBeans project. I&#8217;m not entirely convinced that this is the way to go when compared to SOAP/XML-RPC/REST, but it an [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If you&#8217;ve been around programming for even a little bit you&#8217;re likely to have seen references to <a href="http://java.sun.com/products/javabeans/">JavaBeans</a>.  In an effort to provide a similar remote method invocation (RMI) for <a href="http://www.php.net/">PHP</a> there is now a <a href="http://www.phpbeans.com/">phpBeans</a> project.  I&#8217;m not entirely convinced that this is the way to go when compared to SOAP/XML-RPC/REST, but it an interesting additional option.</p>
<p>One of the things that could really propel something like phpBeans is the ability to make use of it in other languages.  There is already a Ruby client, but I&#8217;m thinking that adding Java, Perl and Python clients would cover enough ground that many more people would be interested in it.  In that respect SOAP/XML-RPC/REST has already beat the beans idea because both sides (client and server) can be in any language.  That sort of flexibility certainly isn&#8217;t free, but it sure can be nice.</p>
<p>So I still haven&#8217;t come to any major conclusion on the idea of phpBeans.  If I get a change I&#8217;ll try it out and see if it is something I want to pursue more seriously.  It certainly has possibilities.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2005/02/11/phpbeans-hmmmmm/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Benchmarks And Dates</title>
		<link>/2005/01/03/benchmarks-and-dates/</link>
					<comments>/2005/01/03/benchmarks-and-dates/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Mon, 03 Jan 2005 18:13:12 +0000</pubDate>
				<category><![CDATA[Database]]></category>
		<category><![CDATA[General]]></category>
		<category><![CDATA[Programming]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2005/01/03/benchmarks-and-dates/</guid>

					<description><![CDATA[Benchmarks, love them or hate them, they are here to stay. Though rarely (never?) perfect, they can be helpful and more often than not, misleading. For now though, I want to comment on just one aspect of benchmarks: dates. As a general rule, most people expect benchmarks to change over time because technology generally advances [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Benchmarks, love them or hate them, they are here to stay.  Though rarely (never?) perfect, they can be helpful and more often than not, misleading.  For now though, I want to comment on just one aspect of benchmarks: dates.  As a general rule, most people expect benchmarks to change over time because technology generally advances and gets better as time goes on.  For my rant on this subject I&#8217;m going to pick on the <a href="http://www.sqlite.org/speed.html">SQLite Database Speed Comparison</a> because it is such a great example of why dates are important to a benchmark (and I am still seeing it <a href="http://www.gadgetopia.com/2004/12/31/LinuxDatabaseBenchmarks.html">referenced</a>, as recently as 31 Dec 2004).</p>
<p>For starters, there is no indication as to when this benchmark was performed.  Was it December 2004?  October 2003?  May 2001?  It doesn&#8217;t say.  Now presumably this benchmark would (should?) carry more weight if it was fairly recent and less weight the older it gets.  The only date I could find on the page was the last modified line at the bottom, 2004/10/10.  This might lead one to believe that this benchmark was done in the very recent past.  There are clues that lead me to believe this is not the case though, specifically the version numbers for the various database systems tested.  While I haven&#8217;t tracked the SQLite releases very well, I&#8217;m reasonably familiar with when PostgreSQL and MySQL releases have happened.  So I looked around to find out definitively when each version of the tested software was released.  Fortunately each one has a changelog available, with dates:</p>
<p><strong>SQLite 2.7.6</strong>: 25 Jan 2003<br />
<strong>PostgreSQL 7.1.3</strong>: 15 Aug 2001<br />
<strong>MySQL 3.23.41</strong>: 11 Aug 2001</p>
<p>The most obvious issue here is the huge range in dates.  While tested versions of PostgreSQL and MySQL were released in the same month, the SQLite version is 17 months newer than either of the other software versions.  At this point I would hazard a guess that this benchmark was probably done not long after January 2003, given the dates above.  On this merit alone I pretty much ignore the numbers generated by this benchmark because of the huge gap in development time.  We&#8217;re talking nearly a year and a half advantage given to SQLite over PostgreSQL and MySQL.  Who would possibly think that this would provide any sort of meaningful comparison for someone looking into database benchmarks?</p>
<p>Just by the way of additional information, by January of 2003, MySQL had released version 4.0.10.  The MySQL 4.0.x branch was given the &#8216;Production&#8217; tag two months later in March.  Comparing it to 3.23.55 might have also been reasonable, it also came out in January 2003.  PostgreSQL released 7.3.5 on 4 February 2003, so they could have used 7.3.1 from December of 2002.</p>
<p>This benchmark is now some where around two years old, making it almost useless for anyone looking for meaningful information today.  Of course with out a published date there is now way of knowing this for sure.  Unless you did a little bit of homework and looked at when the release of each software version was you could be lead to believe that this test was done three weeks ago.  Another important date feature is indicating when the tested version of each software was released.  Normally I might not include that as a requirement because it should be reasonable to assume that the most recent production level code available was the one being tested.  In this case however that is clearly not the case, so that fact needs to be disclosed.</p>
<p>I&#8217;m not picking on SQLite as a product, just using their published benchmark as an example of how excluding date information is a fatal flaw in their document.  Notice I did not discuss any of the results or numbers, because in this case once I found out the pertinent dates I&#8217;m able to throw out pretty much the entire benchmark because of its age.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2005/01/03/benchmarks-and-dates/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
		<item>
		<title>OpenCVS</title>
		<link>/2004/12/06/opencvs/</link>
					<comments>/2004/12/06/opencvs/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Mon, 06 Dec 2004 19:09:17 +0000</pubDate>
				<category><![CDATA[OS]]></category>
		<category><![CDATA[Programming]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2004/12/06/opencvs/</guid>

					<description><![CDATA[Looks like the OpenBSD folks are at it again, this time with OpenCVS. This could be interesting, since CVS development has all but stopped over the last few years. It would be really nice to see them over come some of CVS warts once they are feature compatible with traditional CVS. For as much as [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Looks like the OpenBSD folks are at it again, this time with <a href="http://www.openbsd.org/opencvs/">OpenCVS</a>.  This could be interesting, since CVS development has all but stopped over the last few years.  It would be really nice to see them over come some of CVS warts once they are feature compatible with traditional CVS.</p>
<p>For as much as Subversion looks like the way to go in the future, CVS has a certain ease of simplicity to it.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2004/12/06/opencvs/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Two Complaints With PHP5</title>
		<link>/2004/11/05/two-complaints-with-php5/</link>
					<comments>/2004/11/05/two-complaints-with-php5/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 05 Nov 2004 22:55:05 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[Programming]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2004/11/05/two-complaints-with-php5/</guid>

					<description><![CDATA[I&#8217;ve come around again to looking at PHP5 for a few projects. I started with some small self contained pieces that could be easily tested on their own. To be fair I wrote this code to only work with PHP5, trying to take full advantage of the new features. I quickly developed two complaints: NO [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve come around again to looking at PHP5 for a few projects.  I started with some small self contained pieces that could be easily tested on their own.  To be fair I wrote this code to only work with PHP5, trying to take full advantage of the new features.  I quickly developed two complaints:</p>
<ol>
<li><strong>NO MULTIPLE INHERITANCE?</strong><br />
I like being able to re-use code, multiple inheritance should be a no brainer here.  After digging around Google trying to figure why they would leave this out of PHP5 the most common excuse seems to be that it might be confusing for some people.  After all, what if method foo() exists in multiple parents?  Big whoop, establish a rule on how to deal with that and move on.  Perl&#8217;s solution to this I believe is left to right, with ways to override that if needed.  Continuing the argument against multiple inheritance it has been said in order to implement you can use <a href="http://www.php.net/manual/en/language.oop5.interfaces.php">interfaces</a>.  This is completely bogus!  Interfaces have a use, multiple inheritance isn&#8217;t it.  How can you have code re-use in an interface since it is specifically there not to implement code?</li>
<li><strong>EXCEPTIONS DON&#8217;T HANDLE ERRORS?</strong><br />
After getting over the feeling that PHP5 is trying to impress Java, I&#8217;ve been happy with having <a href="http://www.php.net/manual/en/language.oop5.exceptions.php">exceptions</a> in PHP5.  Unfortunately I was foolish enough to assume that normal errors in PHP would throw exceptions that I would be able to easily catch.  Bzzzt, wrong!  Turns out that exceptions are basically a &#8216;userland&#8217; sort of thing, the system will still chuck errors the way PHP4 did.  To get around this I wrote a simple error handling function that simple took an error and threw an exception using the error information.  This adds another layer of code calling <a href="http://us2.php.net/set_error_handler">set_error_handler()</a> and <a href="http://us2.php.net/manual/en/function.restore-error-handler.php">restore_error_handler()</a> before and after a try and catch block that might cause a PHP error.  Although I couldn&#8217;t find any documentation to confirm this, I suspect this was done in an effort to try and preserve backwards compatibility with PHP4.  I would have rather seen additional knob that would use <a href="http://us2.php.net/manual/en/function.set-exception-handler.php">set_exception_handler()</a> or something to make PHP4 code happy.</li>
</ol>
<p>I generally try not to run around ranting against this and that, I just feel strongly that PHP5 missed out on some very useful and very important steps.  I&#8217;m still a big fan of PHP, I consider it one of the best languages for web apps.  Unfortunately that doesn&#8217;t keep me from being disappointed in what could have been for PHP5.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2004/11/05/two-complaints-with-php5/feed/</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>Top Five WordPress SQL Queries</title>
		<link>/2004/10/28/top-five-wordpress-sql-queries/</link>
					<comments>/2004/10/28/top-five-wordpress-sql-queries/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 28 Oct 2004 07:00:41 +0000</pubDate>
				<category><![CDATA[Database]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2004/10/28/top-five-wordpress-sql-queries/</guid>

					<description><![CDATA[Recently I mentioned a tool to analyze database queries, PQA (Practical Query Analysis). Originally this tool was designed to work with PostgreSQL and now has some support for MySQL. So I turned on query logging for my MySQL server that hosts my WordPress back end. Then I put together a little script to run PQA [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Recently I <a href="http://joseph.randomnetworks.com/archives/2004/10/20/link-dump-2004-10-20/">mentioned</a> a tool to analyze database queries, <a href="http://pqa.projects.postgresql.org/">PQA (Practical Query Analysis)</a>.  Originally this tool was designed to work with <a href="http://www.postgresql.org/">PostgreSQL</a> and now has some support for <a href="http://www.mysql.com/">MySQL</a>.  So I turned on query logging for my MySQL server that hosts my <a href="http://www.wordpress.org/">WordPress</a> back end.  Then I put together a little script to run PQA against the MySQL query log:</p>
<blockquote><p>
#!/bin/sh</p>
<p>/home/joseph/bin/pqa.rb -file /var/db/mysql/query.log -top 5 -normalize -logtype mysql
</p></blockquote>
<p>Nothing fancy: told it where the log was, how many &#8220;top&#8221; queries I wanted, normalize the queries and that the this was for MySQL (instead of PostgreSQL).  I don&#8217;t get a lot of traffic to my site, so I&#8217;ve let the log run for almost a week to get a sample size of more than 100,000 queries.  Now that I&#8217;ve hit that here are the results:</p>
<blockquote><p>
######## Overall statistics<br />
101332 queries (150 unique) parsed in 27.470525 seconds<br />
######## Queries by type<br />
SELECTs: 101191  (100%)<br />
INSERTs: 35      (0%)<br />
UPDATEs: 44  (0%)<br />
DELETEs: 13      (0%)<br />
######## Most frequent queries<br />
16465 times: SELECT * FROM wp_users WHERE user_login = &#8221;<br />
14423 times: SELECT post_date, post_name FROM wp_posts WHERE ID = 0<br />
5391 times: SELECT option_name, option_value FROM wp_options<br />
5391 times: SELECT * FROM wp_users<br />
5347 times: SELECT * FROM wp_categories WHERE 0=0
</p></blockquote>
<p>Before I get into the queries themselves, lets talk about what other info this provided.  I&#8217;ve got 101,332 queries, of which there are only 150 unique queries.  PQA took about 27 seconds to process all of this info.  Far and away the most common type of query was SELECT, this shouldn&#8217;t come as any surprise.  A few INSERTS (new blog entries, comments, trackbacks, etc) and a few UPDATES (editing blog entries) and a few DELETES.  This isn&#8217;t quite normal because the DELETES were the result of a comment spam attack.  Fortunately there were only 13 of them so this doesn&#8217;t really impact our results much.</p>
<p>Now let take a look at the top five most executed queries and see what we can learn.</p>
<p><strong>#1 (16465/101332): SELECT * FROM wp_users WHERE user_login = &#8221;</strong><br />
The wp_users table keeps information about the registered users of a WordPress install, in this case I&#8217;m the only one.  What should strike you as odd is the WHERE clause in this query, it is looking for user details for a username that is empty.  My gut feeling is that this query should never, ever, ever be run by WordPress.  Unless your WordPress install allows for blank usernames then this query will always return an empty result set.  Unfortunately it will have to look through the wp_users table first (hopefully it is looking at an index on user_login) to determine this.  Being able to avoid more than 16% of the total queries should help with speed, especially on systems that are running several copies of WordPress.</p>
<p><strong>#2 (14423/101332): SELECT post_date, post_name FROM wp_posts WHERE ID = 0</strong><br />
As you can probably guess, the wp_posts table stores WordPress blog entries.  Unlike the #1 query this one looks like it might be reasonable, but once again that WHERE clause caught my eye and made me wonder.  So I started looking through all of the rows in the wp_posts table for my WordPress install.  None of them have an ID of 0.  Just like the first query I suspect that this query should never need to be run because it will always return nothing.  At this point I can&#8217;t say this with 100% certainty though because I don&#8217;t know enough about the WordPress internals.  My gut feeling is again that this query could be done away with, removing another 14% of the total queries.</p>
<p><strong>#3 (5391/101332): SELECT option_name, option_value FROM wp_options</strong><br />
This query doesn&#8217;t have a WHERE clause for me to pick on.  The wp_options table is used to store all of the different options that can be set for a WordPress install.  All this query does is fetch all of those options.  I doubt this has any possibilities for removal or optimization.</p>
<p><strong>#4 (5391/101332): SELECT * FROM wp_users</strong><br />
This should look familiar, the only difference between this query and #1 above is the lack of a WHERE clause.  I&#8217;ve got mixed feelings about this query.  On the one hand I&#8217;m suspect of most queries that simply do a SELECT *, especially without a WHERE clause to limit it.  What holds me back here is that I don&#8217;t think this query could be changed without a lot of changes to the source code of WordPress.  Unless you have a lot of users in your WordPress install there isn&#8217;t much (like none at all) optimization that can be done here.</p>
<p><strong>#5 (5347/101332): SELECT * FROM wp_categories WHERE 0=0</strong><br />
A new table to look at, wp_categories.  This is a small table that holds information about entry categories (big surprise eh?).  Once again our friend the WHERE clause provides with a bad feeling.  If you aren&#8217;t familiar with SQL, the clause 0=0 always evaluates to true.  In the context of this query it is completely useless.  Some of you might be saying, so what, how much of a penalty could something small be performance wise?  I asked myself the same question, so I put together a simple benchmark that ran this query with and without the WHERE 0=0 clause.  In my simple tests the addition of WHERE 0=0 on this query against my WordPress database added an additional 0.0001 seconds PER QUERY!  So why am I getting so excited about this, after all in my case that means that I&#8217;m only loosing about 1 second every two weeks, give or take.  Well you would be right, for me personally it won&#8217;t make a much of a difference, but for a system that hosts many WordPress installs it could add up very quickly.  Also this is one of those small optimizations that can add up when thrown together with other little optimizations through out the system.</p>
<p>So what have we learned from the top five WordPress queries?  Well, about 30% of the SELECTs could likely be done away with entirely (#1 and #2).  Another %5 of the SELECTs can gain a slight speed improvement of about one ten-thousandths of a second (#5).  I&#8217;ll definitely be using PQA to look at more queries on other projects in the future.</p>
<p>There are some things to keep in mind here.  These are total queries run over about one week, not all of them are being run on the same page necessarily.  It is entirely possible that each of these queries is being run without the other four being present for a given page.  I don&#8217;t think this is likely, but certainly a possibility.  Another data point that might be helpful is the number of page views turn the same time period.  I decided it wasn&#8217;t worth worrying about that at this point, since my focus was simply of the queries themselves.</p>
<p>For those of you who are now looking at me thinking, hey ding-a-ling, WordPress is an open source project, why don&#8217;t you take this information and send it to the developers so that everyone can benefit from this.  Well, I already did.  Alright that isn&#8217;t really true, I sent them some similar reports about other queries.  One example would be <a href="http://mosquito.wordpress.org/bug_view_page.php?bug_id=0000033">three queries with WHERE 1=1</a> in them.  I even included a diff.  You&#8217;ll notice that this was sent in back in June, more than 4 months ago and it is still open.  I haven&#8217;t been able to get much attention to getting these sorts of changes into the WordPress source.</p>
<p>If you are interested in doing some additional research yourself into some of the SQL queries that are used in WordPress check out my entry on <a href="http://joseph.randomnetworks.com/archives/2004/06/02/mysql-queries-in-wordpress/">MySQL Queries In WordPress</a>, which explains how to turn on displaying all the queries run at the bottom of each page.</p>
<p><strong>UPDATE 10:40am 11 Dec 2004</strong>: It was suggested in a comment (see #4) that 1=1 is a code optimization that is faster than checking to see if variable is empty first.  See comment #5 for my response.  Bottom line: my simple tests show that 1=1 is always slower than if(empty($some_var)) and that 1=1 breaks simple scalability schemes (multiple front end web servers, one big db server).</p>
]]></content:encoded>
					
					<wfw:commentRss>/2004/10/28/top-five-wordpress-sql-queries/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
		<item>
		<title>Making IE Accept File Downloads</title>
		<link>/2004/10/01/making-ie-accept-file-downloads/</link>
					<comments>/2004/10/01/making-ie-accept-file-downloads/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 01 Oct 2004 21:31:33 +0000</pubDate>
				<category><![CDATA[Browsers]]></category>
		<category><![CDATA[How To]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Web]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2004/10/01/making-ie-accept-file-downloads/</guid>

					<description><![CDATA[I&#8217;ve been adding more report features to our internal web app at work. Getting them to the point they are at now is another story, for now let me tell the tale of convincing Internet Explorer (IE) to download a comma separated value (CSV) version of these reports. Here is the situation, a secure (SSL) [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve been adding more report features to our internal web app at work.  Getting them to the point they are at now is another story, for now let me tell the tale of convincing Internet Explorer (IE) to download a comma separated value (CSV) version of these reports.  Here is the situation, a secure (SSL) connection to Apache to an internal website written in PHP talking to a PostgreSQL database with IE 6 on the client end.  The initial version of the reports just displayed in an HTML table as part of the site.  It was suggested that the data should be available as CSV so that employees could easily manipulate or graph the data in Excel.  Sounded reasonable enough.  After a couple of tries it looked like I had everything working.  All of my initial tests were done using Firefox on Windows, with a little bit of testing using Safari on OS X.  I know we still have some folks at work who are still using IE (that too is another story) so I tested that one out last.  Everything worked, right up until I tried to download the CSV version of the reports.</p>
<p>Instead of prompting me with a dialog box to determine if I wanted to open the file or save, IE simply came back and indicated that it couldn&#8217;t save the file and presented with me with one option, &#8216;OK&#8217;.  Of course &#8216;OK&#8217; isn&#8217;t really &#8216;OK&#8217;, because it terminated the download and dropped me back into the website.  Just great, I thought I was pretty much done and then IE showed its unpleasant side.  Knowing that someone else must have ran into this problem I went on a hunt for a solution.  After trying out several ideas over a couple of hours I came across the solution.  Here is what I believe to be the minimum solution to make IE correctly download a file presented to it from PHP.</p>
<p>First, when talking to IE there is an additional session parameter that must be set for the download to work (this was the last piece of the puzzle that I found).  This has to be done before starting the session.</p>
<blockquote>
<pre>
if(strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
    session_cache_limiter("public");
}
session_start();
</pre>
</blockquote>
<p>Once you have built your CSV string and are ready to send it to the browser you&#8217;ll need to add a couple of headers first.</p>
<blockquote>
<pre>
header('Content-type: application/octet-stream');
header('Content-Disposition: attachment; filename="report.csv"');
print($csv);
</pre>
</blockquote>
<p>Now that it all seems to be working it doesn&#8217;t look very impressive, but it was certainly disappointing to have my initial solution work in Safari, Firefox and Opera but not IE.  I hope this saves someone else the hours I spent figuring out why IE hates me.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2004/10/01/making-ie-accept-file-downloads/feed/</wfw:commentRss>
			<slash:comments>87</slash:comments>
		
		
			</item>
	</channel>
</rss>

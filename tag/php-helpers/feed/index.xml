<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>php-helpers &#8211; Joseph Scott</title>
	<atom:link href="/tag/php-helpers/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Wed, 17 Mar 2010 22:07:18 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>PHP Helpers: curl_http_request</title>
		<link>/2010/03/17/php-helpers-curl_http_request/</link>
					<comments>/2010/03/17/php-helpers-curl_http_request/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 17 Mar 2010 22:07:18 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[curl]]></category>
		<category><![CDATA[curl_http_request]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=2029</guid>

					<description><![CDATA[cURL is one very handy program and library, I love having access to in PHP. It has a ton of options though, and I can never seem to remember to flip the right knobs without reviewing the options list. 99% of the time I just want a simple function that does the right thing when [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://curl.haxx.se/">cURL</a> is one very handy program and library, I love having access to in PHP.  It has a ton of options though, and I can never seem to remember to flip the right knobs without reviewing the options list.  99% of the time I just want a simple function that does the right thing when making an HTTP request.  So here&#8217;s the new PHP Helpers function that sets up reasonable defaults for making HTTP requests using cURL:</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;curl_http_request&#8217; ) ) {<br />
    function curl_http_request( $url, $req = &#8216;GET&#8217;, $arg = array( ) ) {<br />
        $body       = &#8221;;<br />
        $cookies    = array( );<br />
        $err_no     = 0;<br />
        $err_msg    = &#8221;;<br />
        $headers    = array( );<br />
        $info       = array( );</p>
<p>        $opt = array(<br />
            &#8216;connect_timeout&#8217;   =&gt; 5,<br />
            &#8216;cookies&#8217;           =&gt; array( ),<br />
            &#8216;follow_location&#8217;   =&gt; TRUE,<br />
            &#8216;http_headers&#8217;      =&gt; array( ),<br />
            &#8216;max_redirects&#8217;     =&gt; 5,<br />
            &#8216;timeout&#8217;           =&gt; 15,<br />
            &#8216;password&#8217;          =&gt; &#8221;,<br />
            &#8216;post_fields&#8217;       =&gt; array( ),<br />
            &#8216;user_agent&#8217;        =&gt; &#8216;PHP curl_http_get&#8217;,<br />
            &#8216;username&#8217;          =&gt; &#8221;,<br />
            &#8216;verify_ssl&#8217;        =&gt; TRUE<br />
        );<br />
        foreach ( $opt as $k =&gt; $v ) {<br />
            if ( isset( $arg[$k] ) ) {<br />
                $opt[$k] = $arg[$k];<br />
            }<br />
        }</p>
<p>        $curl_opt = array(<br />
            CURLOPT_AUTOREFERER     =&gt; TRUE,<br />
            CURLOPT_CONNECTTIMEOUT  =&gt; $opt[&#8216;connect_timeout&#8217;],<br />
            CURLOPT_CUSTOMREQUEST   =&gt; $req,<br />
            CURLOPT_ENCODING        =&gt; &#8221;,<br />
            CURLOPT_FOLLOWLOCATION  =&gt; $opt[&#8216;follow_location&#8217;],<br />
            CURLOPT_HEADER          =&gt; TRUE,<br />
            CURLOPT_MAXREDIRS       =&gt; $opt[&#8216;max_redirects&#8217;],<br />
            CURLOPT_RETURNTRANSFER  =&gt; TRUE,<br />
            CURLOPT_TIMEOUT         =&gt; $opt[&#8216;timeout&#8217;],<br />
            CURLOPT_USERAGENT       =&gt; $opt[&#8216;user_agent&#8217;],<br />
        );</p>
<p>        if (<br />
            is_array( $opt[&#8216;cookies&#8217;] )<br />
            &amp;&amp; count( $opt[&#8216;cookies&#8217;] ) &gt; 0<br />
        ) {<br />
            $curl_opt[CURLOPT_COOKIE] = implode( &#8216;;&#8217;, $opt[&#8216;cookies&#8217;] );<br />
        }</p>
<p>        if ( !empty( $opt[&#8216;username&#8217;] ) ) {<br />
            $curl_opt[CURLOPT_USERPWD] = $opt[&#8216;username&#8217;] . &#8216;:&#8217; . $opt[&#8216;password&#8217;];<br />
        }</p>
<p>        if (<br />
            is_array( $opt[&#8216;post_fields&#8217;] )<br />
            &amp;&amp; count( $opt[&#8216;post_fields&#8217;] ) &gt; 0<br />
        ) {<br />
            $curl_opt[CURLOPT_POST] = TRUE;<br />
            $curl_opt[CURLOPT_POSTFIELDS] = $opt[&#8216;post_fields&#8217;];<br />
        }</p>
<p>        if ( $req == &#8216;HEAD&#8217; ) {<br />
            $curl_opt[CURLOPT_NOBODY] = TRUE;<br />
        }</p>
<p>        if (<br />
            is_array( $opt[&#8216;http_headers&#8217;] )<br />
            &amp;&amp; count( $opt[&#8216;http_headers&#8217;] ) &gt; 0<br />
        ) {<br />
            $curl_opt[CURLOPT_HTTPHEADER] = $opt[&#8216;http_headers&#8217;];<br />
        }</p>
<p>        if ( $opt[&#8216;verify_ssl&#8217;] === FALSE ) {<br />
            $curl_opt[CURLOPT_SSL_VERIFYPEER] = FALSE;<br />
            $curl_opt[CURLOPT_SSL_VERIFYHOST] = 0;<br />
        }</p>
<p>        $curl = curl_init( $url );<br />
        curl_setopt_array( $curl, $curl_opt );</p>
<p>        $body       = curl_exec( $curl );<br />
        $err_no     = curl_errno( $curl );<br />
        $err_msg    = curl_error( $curl );<br />
        $info       = curl_getinfo( $curl );<br />
        curl_close( $curl );</p>
<p>        $header_string = trim( substr( $body, 0, $info[&#8216;header_size&#8217;] ) );<br />
        $body = substr( $body, $info[&#8216;header_size&#8217;] );</p>
<p>        if ( strpos( $header_string, &quot;rnrn&quot; ) !== FALSE ) {<br />
            $header_string = end( explode( &quot;rnrn&quot;, $header_string ) );<br />
            $header_string = str_replace( &quot;rn&quot;, &quot;n&quot;, $header_string );<br />
        }</p>
<p>        foreach ( explode( &quot;n&quot;, $header_string ) as $line ) {<br />
            list( $k, $v ) = explode( &#8216;:&#8217;, $line, 2 );<br />
            if ( empty( $v ) ) {<br />
                continue;<br />
            }</p>
<p>            if ( strtolower( $k ) == &#8216;set-cookie&#8217; ) {<br />
                $cookies[] = trim( $v );<br />
            } else {<br />
                $headers[$k] = trim( $v );<br />
            }<br />
        }</p>
<p>        return array(<br />
            &#8216;body&#8217;      =&gt; $body,<br />
            &#8216;err_no&#8217;    =&gt; $err_no,<br />
            &#8216;err_msg&#8217;   =&gt; $err_msg,<br />
            &#8216;headers&#8217;   =&gt; $headers,<br />
            &#8216;cookies&#8217;   =&gt; $cookies,<br />
            &#8216;info&#8217;      =&gt; $info<br />
        );<br />
    } // function curl_http_request<br />
}<br />
[/sourcecode]</p>
<p>It&#8217;s a bit longer that then other PHP Helper functions <img src="https://s.w.org/images/core/emoji/13.0.1/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /> .</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/03/17/php-helpers-curl_http_request/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: make_slug</title>
		<link>/2010/02/19/php-helpers-make_slug/</link>
					<comments>/2010/02/19/php-helpers-make_slug/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Sat, 20 Feb 2010 00:19:16 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[make_slug]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1918</guid>

					<description><![CDATA[New function, make_slug &#8211; [sourcecode lang=&#8221;php&#8221;] if ( !function_exists( &#8216;make_slug&#8217; ) ) { function make_slug( $str ) { $url_str = strtolower( trim( $str ) ); $url_str = preg_replace( &#8216;/[s_]+/&#8217;, &#8216;-&#8216;, $url_str ); $url_str = preg_replace( &#8216;/-{2,}/&#8217;, &#8216;-&#8216;, $url_str ); $url_str = preg_replace( &#8216;/[^a-z0-9-]/&#8217;, &#8221;, $url_str ); return $url_str; } } [/sourcecode] This takes a string [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>New function, make_slug &#8211;</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;make_slug&#8217; ) ) {<br />
    function make_slug( $str ) {<br />
        $url_str = strtolower( trim( $str ) );</p>
<p>        $url_str = preg_replace( &#8216;/[s_]+/&#8217;, &#8216;-&#8216;, $url_str );<br />
        $url_str = preg_replace( &#8216;/-{2,}/&#8217;, &#8216;-&#8216;, $url_str );<br />
        $url_str = preg_replace( &#8216;/[^a-z0-9-]/&#8217;, &#8221;, $url_str );</p>
<p>        return $url_str;<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>This takes a string and returns a slug that is more URL friendly.  For example &#8220;<code>Do    This_Today &#8211; Please</code>&#8221; would become &#8220;<code>do-this-today-please</code>&#8220;.</p>
<p>The approach is pretty simple:</p>
<ul>
<li>lower case everything (line 3)</li>
<li>replace space and underscore with dash (line 5)</li>
<li>replace two or more dashes with a single dash (line 6)</li>
<li>remove any other characters that aren&#8217;t a-z, 0-9 or a dash (line 7)</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/2010/02/19/php-helpers-make_slug/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: redirect_url</title>
		<link>/2010/02/12/php-helpers-redirect_url/</link>
					<comments>/2010/02/12/php-helpers-redirect_url/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 12 Feb 2010 23:55:35 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<category><![CDATA[redirect_url]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1898</guid>

					<description><![CDATA[New function: redirect_url [sourcecode lang=&#8221;php&#8221;] if ( !function_exists( &#8216;redirect_url&#8217; ) ) { function redirect_url( $url, $status = 302 ) { header( &#34;Location: {$url}&#34;, TRUE, $status ); exit; } } [/sourcecode] A special case wrapper around the header function to do URL redirection. I specifically added the exit call inside the function so that redirect happens [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>New function: redirect_url</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;redirect_url&#8217; ) ) {<br />
    function redirect_url( $url, $status = 302 ) {<br />
        header( &quot;Location: {$url}&quot;, TRUE, $status );<br />
        exit;<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>A special case wrapper around the <a href="http://us.php.net/manual/en/function.header.php">header</a> function to do URL redirection.  I specifically added the exit call inside the function so that redirect happens immediately.  That way I don&#8217;t have a chance to forget about it later on <img src="https://s.w.org/images/core/emoji/13.0.1/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/02/12/php-helpers-redirect_url/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: html_var_dump</title>
		<link>/2010/02/05/php-helpers-html_var_dump/</link>
					<comments>/2010/02/05/php-helpers-html_var_dump/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 05 Feb 2010 16:29:46 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[html_var_dump]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1862</guid>

					<description><![CDATA[With the last function being html_print_r this next one should come as no suprise, html_var_dump: [sourcecode lang=&#8221;php&#8221;] if ( !function_exists( &#8216;html_var_dump&#8217; ) ) { function html_var_dump( $data ) { $out = &#34;n&#60;pre class=&#8217;html-var-dump&#8217;&#34;; $out .= &#34; style=&#8217;border: 1px solid #ccc; padding: 7px;&#8217;&#62;n&#34;; ob_start( ); var_dump( $data ); $out .= esc_html( ob_get_contents( ) ); ob_end_clean( ); [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>With the last function being <a href="http://josephscott.org/archives/2010/02/php-helpers-html_print_r/">html_print_r</a> this next one should come as no suprise, <code>html_var_dump</code>:</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;html_var_dump&#8217; ) ) {<br />
    function html_var_dump( $data ) {<br />
        $out = &quot;n&lt;pre class=&#8217;html-var-dump&#8217;&quot;;<br />
        $out .= &quot; style=&#8217;border: 1px solid #ccc; padding: 7px;&#8217;&gt;n&quot;;</p>
<p>        ob_start( );<br />
        var_dump( $data );<br />
        $out .= esc_html( ob_get_contents( ) );<br />
        ob_end_clean( );</p>
<p>        $out .= &quot;n&lt;/pre&gt;n&quot;;</p>
<p>        return $out;<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>Even though I tend to use print_r more often than <a href="http://us.php.net/var_dump">var_dump</a>, there are times where the type data that var_dump provides can be very helpful.  Unfortunately var_dump will always display data, so it needed to be wrapped in a few <a href="http://us.php.net/manual/en/ref.outcontrol.php">output control functions</a> ( ob_start, ob_get_contents, and ob_end_clean ) to capture it.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/02/05/php-helpers-html_var_dump/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: html_print_r</title>
		<link>/2010/02/01/php-helpers-html_print_r/</link>
					<comments>/2010/02/01/php-helpers-html_print_r/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Mon, 01 Feb 2010 16:33:13 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[html_print_r]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1837</guid>

					<description><![CDATA[Before I get to the next PHP Helpers function I wanted to mention that I&#8217;ve made the code available as a Google Code Project at http://code.google.com/p/php-helpers/. I added specific licensing terms ( MIT style ) &#8211; http://code.google.com/p/php-helpers/source/browse/trunk/license.txt. There&#8217;s also a changelog available to see when functions were added. With that out of the way here&#8217;s [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Before I get to the next PHP Helpers function I wanted to mention that I&#8217;ve made the code available as a Google Code Project at <a href="http://code.google.com/p/php-helpers/">http://code.google.com/p/php-helpers/</a>.  I added specific licensing terms ( MIT style ) &#8211; <a href="http://code.google.com/p/php-helpers/source/browse/trunk/license.txt">http://code.google.com/p/php-helpers/source/browse/trunk/license.txt</a>.  There&#8217;s also a <a href="http://code.google.com/p/php-helpers/source/browse/trunk/changelog.txt">changelog</a> available to see when functions were added.</p>
<p>With that out of the way here&#8217;s the next PHP Helpers function, <code>html_print_r</code>:</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;html_print_r&#8217; ) ) {<br />
    function html_print_r( $data ) {<br />
        $out = &quot;n&lt;pre class=&#8217;html-print-r&#8217;&quot;;<br />
        $out .= &quot; style=&#8217;border: 1px solid #ccc; padding: 7px;&#8217;&gt;n&quot;;<br />
        $out .= esc_html( print_r( $data, TRUE ) );<br />
        $out .= &quot;n&lt;/pre&gt;n&quot;;</p>
<p>        return $out;<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>I added this because I use PHP&#8217;s <a href="http://us.php.net/print_r">print_r</a> in an HTML context quite a bit.  To make the output look reasonable I was always adding PRE tags, which got boring fast.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/02/01/php-helpers-html_print_r/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: esc_html</title>
		<link>/2010/01/19/php-helpers-esc_html/</link>
					<comments>/2010/01/19/php-helpers-esc_html/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Tue, 19 Jan 2010 14:12:18 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[esc_html]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1796</guid>

					<description><![CDATA[Next up in the PHP Helpers series is esc_html: [sourcecode lang=&#8221;php&#8221;] if ( !function_exists( &#8216;esc_html&#8217; ) ) { function esc_html( $html, $char_set = &#8216;UTF-8&#8217; ) { if ( empty( $html ) ) { return &#8221;; } $html = (string) $html; $html = htmlspecialchars( $html, ENT_QUOTES, $char_set ); return $html; } } [/sourcecode] As you might [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Next up in the PHP Helpers series is <code>esc_html</code>:</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;esc_html&#8217; ) ) {<br />
    function esc_html( $html, $char_set = &#8216;UTF-8&#8217; ) {<br />
        if ( empty( $html ) ) {<br />
            return &#8221;;<br />
        }</p>
<p>        $html = (string) $html;<br />
        $html = htmlspecialchars( $html, ENT_QUOTES, $char_set );</p>
<p>        return $html;<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>As you might have guessed this function escapes strings for HTML output.  It&#8217;s not much more than a wrapper around <a href="http://us.php.net/htmlspecialchars">htmlspecialchars</a>, but provides central place to tweak your desired default behavior.</p>
<p>There&#8217;s room to experiment with additional optimizations and strict checking in this as well.  I added the basics (look for empty strings, type cast to a string), if you&#8217;ve got a favorite additional check leave a comment below.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/01/19/php-helpers-esc_html/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: debug_log</title>
		<link>/2010/01/14/php-helpers-debug_log/</link>
					<comments>/2010/01/14/php-helpers-debug_log/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 14 Jan 2010 18:10:24 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[debug_log]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1748</guid>

					<description><![CDATA[I&#8217;ve been thinking recently about useful PHP functions, ones that are so handy that I&#8217;d like to have them available in every PHP code base I work on. These aren&#8217;t necessarily big elaborate functions, they do a single task and do it well. So I&#8217;ll be writing a series of posts called &#8216;PHP Helpers&#8217;. I&#8217;ve [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve been thinking recently about useful PHP functions, ones that are so handy that I&#8217;d like to have them available in every PHP code base I work on.  These aren&#8217;t necessarily big elaborate functions, they do a single task and do it well.  So I&#8217;ll be writing a series of posts called &#8216;PHP Helpers&#8217;.  I&#8217;ve started a php-helpers.php file to keep these in.</p>
<p>The first PHP Helpers function is <code>debug_log</code> &#8211;</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;debug_log&#8217; ) ) {<br />
    function debug_log( $msg, $file = &#8216;/tmp/debug.txt&#8217; ) {<br />
        $msg = gmdate( &#8216;Y-m-d H:i:s&#8217; ) . &#8216; &#8216; . print_r( $msg, TRUE ) . &quot;n&quot;;<br />
        error_log( $msg, 3, $file );<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>This function is wrapped in a function_exists check to make sure that it doesn&#8217;t collide with an existing function of the same name.  I could have put this in a separate class, but I wanted to treat these as first class functions.</p>
<p>This function takes a variable and writes it out to log file (/tmp/debug.txt by default).  The variable can be a string, integer, float, array or object (basically any PHP type) since it gets passed through <a href="http://us.php.net/print_r">print_r</a> for processing.  Each log entry gets a time stamp to make it easy to keep track of the different entries.</p>
<p>To write an entry to the debug log it uses the <a href="http://us.php.net/manual/en/function.error-log.php">error_log</a> function, which makes it easy to append new lines to a text file.</p>
<p>Here&#8217;s a very simple and contrived example of how to use the function:</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
$data = array(<br />
  &#8216;name&#8217; =&gt; &#8216;Joseph&#8217;,<br />
  &#8216;url&#8217; =&gt; &#8216;http://josephscott.org/&#8217;<br />
);</p>
<p>debug_log( $data );<br />
[/sourcecode]</p>
<p>The log entry in /tmp/debug.txt looks like:</p>
<p>[sourcecode]<br />
2010-01-14 18:01:37 Array<br />
(<br />
    [name] =&gt; Joseph<br />
    [url] =&gt; http://josephscott.org/<br />
)<br />
[/sourcecode]</p>
<p>Nothing flashy, just a simple way to log information to a separate file.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/01/14/php-helpers-debug_log/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>curl &#8211; Joseph Scott</title>
	<atom:link href="/tag/curl/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Thu, 04 Apr 2019 19:01:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>Overriding DNS in curl</title>
		<link>/2018/11/20/overriding-dns-in-curl/</link>
					<comments>/2018/11/20/overriding-dns-in-curl/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 21 Nov 2018 00:11:28 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[curl]]></category>
		<category><![CDATA[howto]]></category>
		<guid isPermaLink="false">/?p=16528</guid>

					<description><![CDATA[Often I&#8217;ll run into a situation where I need to make an HTTP request for a host name against a server that is at a different IP address than the one the host name resolves to. A common reason for this is to test out changes against a sandbox before deploying the change to production. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Often I&#8217;ll run into a situation where I need to make an HTTP request for a host name against a server that is at a different IP address than the one the host name resolves to. A common reason for this is to test out changes against a sandbox before deploying the change to production.</p>
<p>One way to deal with this in <a href="https://curl.haxx.se/">curl</a> is with the <a href="https://curl.haxx.se/docs/manpage.html#--resolve"><code>--resolve</code></a> option. Here is a simple example:</p>
<pre class="line-numbers"><code class="language-markup">curl &#8211; resolve google.com:443:172.217.1.206 https://www.google.com/</code></pre>
<p>Internally curl will make sure that google.com resolves to 172.217.1.206 for the purposes of that request.  No need to mess around with hosts files or anything else.</p>
<p>For more suggestions in this area check out <a href="https://daniel.haxx.se/blog/2018/04/05/curl-another-host/">curl another host</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2018/11/20/overriding-dns-in-curl/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Multiplexed Uploads</title>
		<link>/2015/07/01/multiplexed-uploads/</link>
					<comments>/2015/07/01/multiplexed-uploads/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 01 Jul 2015 14:01:23 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[curl]]></category>
		<category><![CDATA[http2]]></category>
		<guid isPermaLink="false">https://josephscott.org/?p=13099</guid>

					<description><![CDATA[With HTTP/2 cURL is going to support multiplexed uploads: I’ve successfully used the http2-upload.c code to upload 600 parallel streams to the test server and they were all sent off fine and the responses received were stored fine. Most of the discussion in HTTP/2 around multiplexing is for downloading. I hadn&#8217;t given much thought to [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>With HTTP/2 <a href="http://daniel.haxx.se/blog/2015/05/21/status-update-http2-multiplexed-uploads/">cURL is going to support multiplexed uploads</a>:</p>
<blockquote><p>
I’ve successfully used the http2-upload.c code to upload 600 parallel streams to the test server and they were all sent off fine and the responses received were stored fine.
</p></blockquote>
<p>Most of the discussion in HTTP/2 around multiplexing is for downloading.  I hadn&#8217;t given much thought to multiplexing uploads.</p>
<p>Any browsers looking to implement this?</p>
]]></content:encoded>
					
					<wfw:commentRss>/2015/07/01/multiplexed-uploads/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>curlt: cURL With Timing</title>
		<link>/2015/05/21/curlt-curl-with-timing/</link>
					<comments>/2015/05/21/curlt-curl-with-timing/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 21 May 2015 15:22:43 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[curl]]></category>
		<guid isPermaLink="false">https://josephscott.org/?p=12600</guid>

					<description><![CDATA[I&#8217;ve previously talked about how to get timing details with cURL. On that post is a comment by Matthias Lüdtke linking to a]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve previously talked about how to get <a href="https://josephscott.org/archives/2011/10/timing-details-with-curl/">timing details with cURL</a>.  On that post is <a href="https://josephscott.org/archives/2011/10/timing-details-with-curl/#comment-3811">a comment by Matthias Lüdtke</a> linking to a <code><a href=https://github.com/mat/dotfiles/blob/master/bin/curlt">curlt</a></code> script.</p>
<p>I liked that script so much that I&#8217;ve added it to my standard set of shell tools.  My slightly modified version is at <a href="https://github.com/josephscott/shell/blob/master/bin/curlt">https://github.com/josephscott/shell/blob/master/bin/curlt</a>.</p>
<p>For easy reference, here is how my <code><a href="https://github.com/josephscott/shell/blob/master/bin/curlt">curlt</a></code> looks right now:</p>
<p>[sourcecode lang=&#8221;shell&#8221;]<br />
#!/bin/bash</p>
<p>curl_format='{<br />
	&quot;time_namelookup&quot;:      %{time_namelookup},<br />
	&quot;time_connect&quot;:         %{time_connect},<br />
	&quot;time_appconnect&quot;:      %{time_appconnect},<br />
	&quot;time_pretransfer&quot;:     %{time_pretransfer},<br />
	&quot;time_redirect&quot;:        %{time_redirect},<br />
	&quot;time_starttransfer&quot;:   %{time_starttransfer},<br />
	&quot;time_total&quot;:           %{time_total}<br />
}&#8217;</p>
<p>curl -w &quot;$curl_format&quot; -k &#8211;compressed -v -s -o /dev/null &quot;$@&quot;<br />
[/sourcecode]</p>
]]></content:encoded>
					
					<wfw:commentRss>/2015/05/21/curlt-curl-with-timing/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Timing Details With cURL</title>
		<link>/2011/10/14/timing-details-with-curl/</link>
					<comments>/2011/10/14/timing-details-with-curl/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 14 Oct 2011 16:17:05 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[curl]]></category>
		<category><![CDATA[http]]></category>
		<category><![CDATA[jon-fox]]></category>
		<category><![CDATA[performance]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=4943</guid>

					<description><![CDATA[Jon&#8217;s recent Find the Time to First Byte Using Curl post reminded me about the additional timing details that cURL can provide. cURL supports formatted output for the details of the request ( see the cURL manpage for details, under &#8220;-w, &#8211; write-out &#60;format&#62;&#8221; ). For our purposes we&#8217;ll focus just on the timing details [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Jon&#8217;s recent <a href="http://www.jonefox.com/blog/2011/10/10/find-the-time-to-first-byte-using-curl/">Find the Time to First Byte Using Curl</a> post reminded me about the additional timing details that <a href="http://curl.haxx.se/">cURL</a> can provide.</p>
<p>cURL supports formatted output for the details of the request ( see the <a href="http://curl.haxx.se/docs/manpage.html">cURL manpage</a> for details, under &#8220;-w, &#8211;write-out &lt;format&gt;&#8221; ). For our purposes we&#8217;ll focus just on the timing details that are provided.</p>
<p>Step one: create a new file, curl-format.txt, and paste in:</p>
<pre class="line-numbers"><code class="language-markup">time_namelookup: %{time_namelookup}
time_connect: %{time_connect}
time_appconnect: %{time_appconnect}
time_pretransfer: %{time_pretransfer}
time_redirect: %{time_redirect}
time_starttransfer: %{time_starttransfer}
———
time_total: %{time_total}</code></pre>
<p>Step two, make a request:</p>
<pre>curl -w "@curl-format.txt" -o /dev/null -s http://wordpress.com/
</pre>
<p>What this does:</p>
<ul>
<li><code>-w "@curl-format.txt"</code> tells cURL to use our format file</li>
<li><code>-o /dev/null</code> redirects the output of the request to /dev/null</li>
<li><code>-s</code> tells cURL not to show a progress meter</li>
<li><code>http://wordpress.com/</code> is the URL we are requesting</li>
</ul>
<p>And here is what you get back:</p>
<pre class="line-numbers"><code class="language-markup">time_namelookup: 0.001
time_connect: 0.037
time_appconnect: 0.000
time_pretransfer: 0.037
time_redirect: 0.000
time_starttransfer: 0.092
———
time_total: 0.164</code></pre>
<p>Jon was looking specifically at time to first byte, which is the time_starttransfer line. The other timing details include DNS lookup, TCP connect, pre-transfer negotiations, redirects (in this case there were none), and of course the total time.</p>
<p>The format file for this output provides a reasonable level of flexibility, for instance you could make it CSV formatted for easy parsing. You might want to do that if you were running this as a cron job to track timing details of a specific URL.</p>
<p>For details on the other information that cURL can provide using <code>-w</code> check out the <a href="http://curl.haxx.se/docs/manpage.html">cURL manpage</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2011/10/14/timing-details-with-curl/feed/</wfw:commentRss>
			<slash:comments>42</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Helpers: curl_http_request</title>
		<link>/2010/03/17/php-helpers-curl_http_request/</link>
					<comments>/2010/03/17/php-helpers-curl_http_request/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 17 Mar 2010 22:07:18 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[curl]]></category>
		<category><![CDATA[curl_http_request]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[php-helpers]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=2029</guid>

					<description><![CDATA[cURL is one very handy program and library, I love having access to in PHP. It has a ton of options though, and I can never seem to remember to flip the right knobs without reviewing the options list. 99% of the time I just want a simple function that does the right thing when [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://curl.haxx.se/">cURL</a> is one very handy program and library, I love having access to in PHP.  It has a ton of options though, and I can never seem to remember to flip the right knobs without reviewing the options list.  99% of the time I just want a simple function that does the right thing when making an HTTP request.  So here&#8217;s the new PHP Helpers function that sets up reasonable defaults for making HTTP requests using cURL:</p>
<p>[sourcecode lang=&#8221;php&#8221;]<br />
if ( !function_exists( &#8216;curl_http_request&#8217; ) ) {<br />
    function curl_http_request( $url, $req = &#8216;GET&#8217;, $arg = array( ) ) {<br />
        $body       = &#8221;;<br />
        $cookies    = array( );<br />
        $err_no     = 0;<br />
        $err_msg    = &#8221;;<br />
        $headers    = array( );<br />
        $info       = array( );</p>
<p>        $opt = array(<br />
            &#8216;connect_timeout&#8217;   =&gt; 5,<br />
            &#8216;cookies&#8217;           =&gt; array( ),<br />
            &#8216;follow_location&#8217;   =&gt; TRUE,<br />
            &#8216;http_headers&#8217;      =&gt; array( ),<br />
            &#8216;max_redirects&#8217;     =&gt; 5,<br />
            &#8216;timeout&#8217;           =&gt; 15,<br />
            &#8216;password&#8217;          =&gt; &#8221;,<br />
            &#8216;post_fields&#8217;       =&gt; array( ),<br />
            &#8216;user_agent&#8217;        =&gt; &#8216;PHP curl_http_get&#8217;,<br />
            &#8216;username&#8217;          =&gt; &#8221;,<br />
            &#8216;verify_ssl&#8217;        =&gt; TRUE<br />
        );<br />
        foreach ( $opt as $k =&gt; $v ) {<br />
            if ( isset( $arg[$k] ) ) {<br />
                $opt[$k] = $arg[$k];<br />
            }<br />
        }</p>
<p>        $curl_opt = array(<br />
            CURLOPT_AUTOREFERER     =&gt; TRUE,<br />
            CURLOPT_CONNECTTIMEOUT  =&gt; $opt[&#8216;connect_timeout&#8217;],<br />
            CURLOPT_CUSTOMREQUEST   =&gt; $req,<br />
            CURLOPT_ENCODING        =&gt; &#8221;,<br />
            CURLOPT_FOLLOWLOCATION  =&gt; $opt[&#8216;follow_location&#8217;],<br />
            CURLOPT_HEADER          =&gt; TRUE,<br />
            CURLOPT_MAXREDIRS       =&gt; $opt[&#8216;max_redirects&#8217;],<br />
            CURLOPT_RETURNTRANSFER  =&gt; TRUE,<br />
            CURLOPT_TIMEOUT         =&gt; $opt[&#8216;timeout&#8217;],<br />
            CURLOPT_USERAGENT       =&gt; $opt[&#8216;user_agent&#8217;],<br />
        );</p>
<p>        if (<br />
            is_array( $opt[&#8216;cookies&#8217;] )<br />
            &amp;&amp; count( $opt[&#8216;cookies&#8217;] ) &gt; 0<br />
        ) {<br />
            $curl_opt[CURLOPT_COOKIE] = implode( &#8216;;&#8217;, $opt[&#8216;cookies&#8217;] );<br />
        }</p>
<p>        if ( !empty( $opt[&#8216;username&#8217;] ) ) {<br />
            $curl_opt[CURLOPT_USERPWD] = $opt[&#8216;username&#8217;] . &#8216;:&#8217; . $opt[&#8216;password&#8217;];<br />
        }</p>
<p>        if (<br />
            is_array( $opt[&#8216;post_fields&#8217;] )<br />
            &amp;&amp; count( $opt[&#8216;post_fields&#8217;] ) &gt; 0<br />
        ) {<br />
            $curl_opt[CURLOPT_POST] = TRUE;<br />
            $curl_opt[CURLOPT_POSTFIELDS] = $opt[&#8216;post_fields&#8217;];<br />
        }</p>
<p>        if ( $req == &#8216;HEAD&#8217; ) {<br />
            $curl_opt[CURLOPT_NOBODY] = TRUE;<br />
        }</p>
<p>        if (<br />
            is_array( $opt[&#8216;http_headers&#8217;] )<br />
            &amp;&amp; count( $opt[&#8216;http_headers&#8217;] ) &gt; 0<br />
        ) {<br />
            $curl_opt[CURLOPT_HTTPHEADER] = $opt[&#8216;http_headers&#8217;];<br />
        }</p>
<p>        if ( $opt[&#8216;verify_ssl&#8217;] === FALSE ) {<br />
            $curl_opt[CURLOPT_SSL_VERIFYPEER] = FALSE;<br />
            $curl_opt[CURLOPT_SSL_VERIFYHOST] = 0;<br />
        }</p>
<p>        $curl = curl_init( $url );<br />
        curl_setopt_array( $curl, $curl_opt );</p>
<p>        $body       = curl_exec( $curl );<br />
        $err_no     = curl_errno( $curl );<br />
        $err_msg    = curl_error( $curl );<br />
        $info       = curl_getinfo( $curl );<br />
        curl_close( $curl );</p>
<p>        $header_string = trim( substr( $body, 0, $info[&#8216;header_size&#8217;] ) );<br />
        $body = substr( $body, $info[&#8216;header_size&#8217;] );</p>
<p>        if ( strpos( $header_string, &quot;rnrn&quot; ) !== FALSE ) {<br />
            $header_string = end( explode( &quot;rnrn&quot;, $header_string ) );<br />
            $header_string = str_replace( &quot;rn&quot;, &quot;n&quot;, $header_string );<br />
        }</p>
<p>        foreach ( explode( &quot;n&quot;, $header_string ) as $line ) {<br />
            list( $k, $v ) = explode( &#8216;:&#8217;, $line, 2 );<br />
            if ( empty( $v ) ) {<br />
                continue;<br />
            }</p>
<p>            if ( strtolower( $k ) == &#8216;set-cookie&#8217; ) {<br />
                $cookies[] = trim( $v );<br />
            } else {<br />
                $headers[$k] = trim( $v );<br />
            }<br />
        }</p>
<p>        return array(<br />
            &#8216;body&#8217;      =&gt; $body,<br />
            &#8216;err_no&#8217;    =&gt; $err_no,<br />
            &#8216;err_msg&#8217;   =&gt; $err_msg,<br />
            &#8216;headers&#8217;   =&gt; $headers,<br />
            &#8216;cookies&#8217;   =&gt; $cookies,<br />
            &#8216;info&#8217;      =&gt; $info<br />
        );<br />
    } // function curl_http_request<br />
}<br />
[/sourcecode]</p>
<p>It&#8217;s a bit longer that then other PHP Helper functions <img src="https://s.w.org/images/core/emoji/13.0.1/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> .</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/03/17/php-helpers-curl_http_request/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>PHP Implementation of cURL</title>
		<link>/2006/07/10/php-implementation-of-curl/</link>
					<comments>/2006/07/10/php-implementation-of-curl/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Mon, 10 Jul 2006 19:04:30 +0000</pubDate>
				<category><![CDATA[josephscott]]></category>
		<category><![CDATA[curl]]></category>
		<category><![CDATA[PHP]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2006/07/10/php-implementation-of-curl/</guid>

					<description><![CDATA[This is just brilliant. A PHP implementation of cURL. The bottom line: with this you can use the PHP cURL functions even if the extension isn&#8217;t around. The library first checks for the extension, then the command line client and if neither of those are around then it makes use of its own code. Even [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This is just brilliant.  A <a href="http://code.blitzaffe.com/pages/phpclasses/category/52/fileid/7">PHP implementation of cURL</a>.  The bottom line: with this you can use the <a href="http://php.net/curl">PHP cURL</a> functions even if the extension isn&#8217;t around.  The library first checks for the extension, then the command line client and if neither of those are around then it makes use of its own code.  Even works with SSL as long as the OpenSSL extension is available.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2006/07/10/php-implementation-of-curl/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>domas-mituzas &#8211; Joseph Scott</title>
	<atom:link href="/tag/domas-mituzas/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Tue, 06 Oct 2015 19:00:10 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>MySQL ORDER BY</title>
		<link>/2015/10/06/on-order-by-optimization-domas-mituzas/</link>
					<comments>/2015/10/06/on-order-by-optimization-domas-mituzas/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Tue, 06 Oct 2015 19:00:10 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[domas-mituzas]]></category>
		<category><![CDATA[MySQL]]></category>
		<guid isPermaLink="false">https://josephscott.org/?p=13411</guid>

					<description><![CDATA[Domas Mituzas on ORDER BY optimization in MySQL: So, it was SELECT c,d FROM t WHERE b=X ORDER BY a DESC LIMIT 1, where PK is (a) and a possible index is on (b,c). What we were observing was a massive table scan on PK instead of using (b, &#8230;) indexing. Table in question was [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Domas Mituzas <a href="http://dom.as/2015/07/30/on-order-by-optimization/">on ORDER BY optimization</a> in MySQL:</p>
<blockquote><p>
So, it was SELECT c,d FROM t WHERE b=X ORDER BY a DESC LIMIT 1, where PK is (a) and a possible index is on (b,c).</p>
<p>What we were observing was a massive table scan on PK instead of using (b, &#8230;) indexing. Table in question was in hundreds of gigabytes, so that did hurt, a bit. If one forced the (b,c) index, queries became really fast.</p>
<p>&#8230;</p>
<p>This function would say that the ref_key (b,c) – the index that returns least rows – is not the best key, and the best key is one on (a). How did it come up with such conclusion? Short answer – optimizer is very naïve.</p></blockquote>
<p>Index selection for fun and profit.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2015/10/06/on-order-by-optimization-domas-mituzas/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>xhr &#8211; Joseph Scott</title>
	<atom:link href="/tag/xhr/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Wed, 15 Apr 2015 15:49:14 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>The Basics of fetch()</title>
		<link>/2015/04/15/the-basics-of-fetch/</link>
					<comments>/2015/04/15/the-basics-of-fetch/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 15 Apr 2015 15:49:14 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[fetch]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[xhr]]></category>
		<guid isPermaLink="false">https://josephscott.org/?p=11775</guid>

					<description><![CDATA[HTML5Rocks has a Introduction to fetch(). The new fetch() is intended to replace XHR ( XMLHttpRequest ).]]></description>
										<content:encoded><![CDATA[<p>HTML5Rocks has a <a href="http://updates.html5rocks.com/2015/03/introduction-to-fetch">Introduction to fetch()</a>.  The new <a href="https://fetch.spec.whatwg.org/">fetch()</a> is intended to replace <a href="https://xhr.spec.whatwg.org/">XHR</a> ( XMLHttpRequest )</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2015/04/15/the-basics-of-fetch/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>XHR / AJAX Performance &#8211; GET or POST?</title>
		<link>/2010/07/14/xhr-ajax-performance-get-or-post/</link>
					<comments>/2010/07/14/xhr-ajax-performance-get-or-post/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 14 Jul 2010 15:18:45 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[ajax]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[tcp/ip]]></category>
		<category><![CDATA[xhr]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=2519</guid>

					<description><![CDATA[Update, 02 Dec 2014: updated the loadimpact.com links ( which were broken ) to use copies at the Internet Archive. During the summer of 2009 I posted about XMLHttpRequest (XHR) using multiple packets for HTTP POST, but HTTP GET requests only used one (in most cases). This led to several people recommending HTTP GET requests [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><strong>Update, 02 Dec 2014:</strong> updated the loadimpact.com links ( which were broken ) to use copies at the Internet Archive.</p>
<hr />
<p>During the summer of 2009 I posted about <a href="http://josephscott.org/archives/2009/08/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/">XMLHttpRequest (XHR) using multiple packets for HTTP POST</a>, but HTTP GET requests only used one (in most cases).  This led to several people recommending HTTP GET requests for AJAX when possible, to maximize performance.</p>
<p>Fortunately someone (<a href="http://loadimpact.com/">Load Impact</a>) took actual measurements to see what this looked like in the real world &#8211; <strike><a href="http://loadimpact.com/blog/ajax-get-or-post-which-is-best">AJAX GET or POST &#8211; which is best?</a></strike> <a href="https://web.archive.org/web/20100717202029/http://loadimpact.com/blog/ajax-get-or-post-which-is-best">AJAX GET or POST &#8211; which is best? (Internet Archive )</a>.  For details check out their <strike><a href="http://loadimpact.com/info/Analysis_of_browser_specific_characteristics.pdf">analysis report (PDF)</a></strike> <a href="https://web.archive.org/web/20101006110146/http://loadimpact.com/info/Analysis_of_browser_specific_characteristics.pdf">analysis report (PDF) (Internet Archive)</a> (warning, contains gory geek details).  The short version, what they observed is that not only was HTTP POST (multiple packets) not slower, it was faster.  This is definitely contrary to the basic mental model of how this should work.</p>
<p>If you are into front end performance and or TCP/IP go check it out, it would be great to get a solid explanation of why they are seeing these results.  On the flip side, if there is a flaw in the testing it would be good to identify that and come up with a new test.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/07/14/xhr-ajax-performance-get-or-post/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>XMLHttpRequest (XHR) Uses Multiple Packets for HTTP POST?</title>
		<link>/2009/08/27/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/</link>
					<comments>/2009/08/27/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 27 Aug 2009 15:53:54 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[firefox]]></category>
		<category><![CDATA[http]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[xhr]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=1411</guid>

					<description><![CDATA[A recent Think Vitamin article, The Definitive Guide to GET vs POST, mentioned something that I hadn&#8217;t seen before about XMLHttpRequest (XHR). Their Rule #4 states: When using XMLHttpRequest, browsers implement POST as a two-step process (sending the headers first and then the data). This means that GET requests are more responsive – something you [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>A recent Think Vitamin article, <a href="http://carsonified.com/blog/dev/the-definitive-guide-to-get-vs-post/">The Definitive Guide to GET vs POST</a>, mentioned something that I hadn&#8217;t seen before about XMLHttpRequest (XHR).  Their Rule #4 states:</p>
<blockquote><p>
When using XMLHttpRequest, browsers implement POST as a two-step process (sending the headers first and then the data). This means that GET requests are more responsive – something you need in AJAX environments.
</p></blockquote>
<p>The claim is that even the smallest XHR will be sent using two packets if the request is done over HTTP POST instead of HTTP GET.  I don&#8217;t remember ever having heard this claim before.</p>
<p>Let me first say that performance issues for POST vs. GET probably shouldn&#8217;t be your top factor for deciding which one to use.  Make sure that you understand the implications of each and pick the right method for your request.  For most people I suspect the biggest factor will involve caching, not performance.  I was going to leave a comment on the article about this, but <a href="http://carsonified.com/blog/dev/the-definitive-guide-to-get-vs-post/#comment-13698">Simon beat me to it</a>.</p>
<p>I wasn&#8217;t the only one who wanted to find out more about XHR POST using multiple packets.  Fortunately someone else already <a href="http://carsonified.com/blog/dev/the-definitive-guide-to-get-vs-post/#comment-13556">asked that question</a> and the author <a href="http://carsonified.com/blog/dev/the-definitive-guide-to-get-vs-post/#comment-13569">replied</a>:</p>
<blockquote><p>
2. My claim is based on research done by Iain Lamb, cofounder of the Oddpost webmail startup that was acquired by Yahoo! and eventually became the basis for the all-new Yahoo! Mail.</p>
<p>His research showed “rather baffling finding: POST requests, made via the XMLHTTP object, send header and body data in separate tcp/ip packets [and therefore,] xmlhttp GET performs better when sending small amounts of data than an xmlhttp POST.”</p>
<p>That is why Yahoo includes the use of GET instead of POST as one of their high performance speed optimisation rules.
</p></blockquote>
<p>Simon Willison did some looking around and <a href="http://simonwillison.net/2009/Aug/18/performance/#comments">found more links for this</a>.  It was mentioned <a href="http://developer.yahoo.com/performance/rules.html">here</a> and <a href="http://yuiblog.com/blog/2007/03/01/performance-research-part-3/#comment-59531">here</a>, so it looks like <a href="http://lamb.cc/">Iain Lamb</a> did do this research, even though I couldn&#8217;t find a first person account of it.  This was enough information to make me curious, but not enough to answer all of my questions.  It was time to run some tests of my own.</p>
<p>So I updated my install of <a href="http://www.wireshark.org/">Wireshark</a> on Windows XP, turned off all of the packet reassembly options for HTTP decoding and started testing browsers.  My very simple XHR POST test page looked like this:</p>
<p>[sourcecode lang=&#8221;html&#8221;]<br />
&lt;button type=&quot;button&quot; onclick=&quot;$.post(&#8216;hello.txt&#8217;, {name: &#8216;Joseph&#8217;})&quot;&gt;XHR POST&lt;/button&gt;<br />
&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js&quot;&gt;&lt;/script&gt;<br />
[/sourcecode]</p>
<p>When the button is clicked an XHR POST request is made to hello.txt with the name=Joseph for a tiny amount of data.  The domain I tested on sent along some cookies as well, but still left enough room for the tiny POST payload to fit in a single TCP packet.</p>
<p>Here are the results of the tests that I ran:</p>
<ul>
<li>IE 6 &#8211; 2 packets</li>
<li>IE 7 &#8211; 2 packets</li>
<li>IE 8 &#8211; 2 packets</li>
<li><b>Firefox 3.0.13 &#8211; 1 packet</b></li>
<li><b>Firefox 3.5.2 &#8211; 1 packet</b></li>
<li>Opera 9.27 &#8211; 2 packets</li>
<li>Safari 4.0.3 &#8211; 2 packets</li>
<li>Chrome 2.0.172.43 &#8211; 2 packets</li>
</ul>
<p>The short version of this is pretty easy to see, all of the browsers except for Firefox will use at least 2 packets for an XHR done over HTTP POST.  When I saw that Safari sent 2 packets I figured that Chrome would as well, but I tested it anyway just to make sure.</p>
<p>I looked at the data size of each packet in IE 6; the first packet had 575 bytes of data and the second packet had 11 bytes of data.  This lined up with the POST request which indicated that the content length was 11 bytes.  The second packet consisted only of the POST data.  Because Firefox sent less data in the user-agent string I increased the POST data so that it would exceed the combined total of the two IE packets to make sure I wasn&#8217;t running into any odd packet fragmentation.  The second packet in Opera, Safari and Chrome was also only the 11 bytes of POST data.</p>
<p>If this were <a href="http://dsc.discovery.com/fansites/mythbusters/mythbusters.html">Myth Busters</a> I&#8217;d call this myth confirmed.  While it is true that not ALL browsers will always use two packets, it appears that the two packet process is the rule, not the exception.  And with <a href="http://gs.statcounter.com/#browser-ww-monthly-200807-200908">IE still the most widely used browser</a> it&#8217;s very likely that a large portion of your users fall into the two packet category.  If on the other hand 95% of your users happen to be using Firefox, then sure, you can skip thinking about this.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2009/08/27/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/feed/</wfw:commentRss>
			<slash:comments>27</slash:comments>
		
		
			</item>
	</channel>
</rss>

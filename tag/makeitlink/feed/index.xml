<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>makeitlink &#8211; Joseph Scott</title>
	<atom:link href="/tag/makeitlink/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Tue, 27 Oct 2009 14:01:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>MakeItLink Update</title>
		<link>/2009/10/27/makeitlink-update/</link>
					<comments>/2009/10/27/makeitlink-update/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Tue, 27 Oct 2009 14:01:24 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[makeitlink]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">http://josephscott.org/archives/2009/10/makeitlink-update/</guid>

					<description><![CDATA[With the upcoming release of WordPress 2.9 I thought this would be a good time to re-sync my original MakeItLink PHP class. I went back and did some additional checks with the make_clickable function in WordPress and found a few cases where it wasn&#8217;t generating the expected URL. That resulted in ticket #10990 and just [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>With the upcoming release of WordPress 2.9 I thought this would be a good time to re-sync my <a href="http://josephscott.org/archives/2008/11/makeitlink-detecting-urls-in-text-and-making-them-links/">original MakeItLink PHP class</a>.  I went back and did some additional checks with the make_clickable function in WordPress and found a few cases where it wasn&#8217;t generating the expected URL.  That resulted in <a href="http://core.trac.wordpress.org/ticket/10990">ticket #10990</a> and just like before filosofo did a great job of improving my fix.</p>
<p>After a few rounds of tests (from <a href="http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_formatting.php">text_includes_formatting.php</a>) the various example strings all worked as expected.  The last diff by filosofo has been committed to -trunk and will be part of WordPress 2.9.</p>
<p>I expanded my <a href="http://josephscott.org/code/php/makeitlink/">MakeItLink page</a> with an updated version of the code (0.2.0), a basic example and some background.  For those who want to go right into the code it&#8217;s available <a href="http://josephscott.org/projects/code/php/makeitlink/makeitlink.php.txt">here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2009/10/27/makeitlink-update/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>MakeItLink &#8211; Detecting URLs In Text And Making Them Links</title>
		<link>/2008/11/28/makeitlink-detecting-urls-in-text-and-making-them-links/</link>
					<comments>/2008/11/28/makeitlink-detecting-urls-in-text-and-making-them-links/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 28 Nov 2008 16:00:56 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[makeitlink]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=467</guid>

					<description><![CDATA[In late October Jeff Atwood wrote about The Problems With URLs, describing the problems of parsing out URLs in text and transforming them into links. Here&#8217;s a simple example: My website is at http://josephscott.org/ Would be changed into: My website is at &#60;a href=&#8217;http://josephscott.org/&#8217;&#62;http://josephscott.org/&#60;/a&#62; Sounds simple right? Once you start looking at what the valid [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>In late October Jeff Atwood wrote about <a href="http://www.codinghorror.com/blog/archives/001181.html">The Problems With URLs</a>, describing the problems of parsing out URLs in text and transforming them into links.  Here&#8217;s a simple example:</p>
<blockquote><p>
My website is at http://josephscott.org/
</p></blockquote>
<p>Would be changed into:</p>
<blockquote><p>
My website is at &lt;a href=&#8217;http://josephscott.org/&#8217;&gt;http://josephscott.org/&lt;/a&gt;
</p></blockquote>
<p>Sounds simple right?  Once you start looking at what the valid character set is for URLs things get tricky.  I won&#8217;t rehash all of items, go the <a href="http://www.codinghorror.com/blog/archives/001181.html">The Problem With URLs</a> post to see an example of some of the problems.</p>
<p>I knew that <a href="http://wordpress.org/">WordPress</a> had a <a href="http://trac.wordpress.org/browser/tags/2.6.5/wp-includes/formatting.php#L685">make_clickable</a> function (in wp-includes/formatting.php) that did this exact thing.  After testing this against some of the problems that Jeff points out it became clear that make_clickable() didn&#8217;t handle these edge cases.  I made some rather crude tweaks to the WordPress code to fix some of these and opened <a href="http://trac.wordpress.org/ticket/8300">ticket 8300</a> with my patches.  Then filosofo came along and not only cleaned up my hacks, but reduced the amount of code needed in general.  Major kudos to filosofo!</p>
<p>At this point it looks like we&#8217;ve got code to make make_clickable() work correctly with problem URLs.  I&#8217;m going to wait until after WordPress 2.7 is released to push for getting this code committed since we&#8217;re trying to get 2.7 wrapped up.</p>
<p>I got thinking, this bit of code would be really handy to have as a stand alone library.  So I pulled out the various pieces of code needed to make this work and put it together in a single PHP class: MakeItLink</p>
<p>[sourcecode language=&#8221;php&#8221;]<br />
class MakeItLink {<br />
    protected function _link_www( $matches ) {<br />
        $url = $matches[2];<br />
        $url = MakeItLink::cleanURL( $url );<br />
        if( empty( $url ) ) {<br />
            return $matches[0];<br />
        }</p>
<p>        return &#8220;{$matches[1]}<a href='{$url}'>{$url}</a>&#8220;;<br />
    }</p>
<p>    public function cleanURL( $url ) {<br />
        if( $url == &#8221; ) {<br />
            return $url;<br />
        }</p>
<p>        $url = preg_replace( &#8220;|[^a-z0-9-~+_.?#=!&amp;;,/:%@$*'()x80-xff]|i&#8221;, &#8221;, $url );<br />
        $url = str_replace( array( &#8220;%0d&#8221;, &#8220;%0a&#8221; ), &#8221;, $url );<br />
        $url = str_replace( &#8220;;//&#8221;, &#8220;://&#8221;, $url );</p>
<p>        /* If the URL doesn&#8217;t appear to contain a scheme, we<br />
         * presume it needs http:// appended (unless a relative<br />
         * link starting with / or a php file).<br />
         */<br />
        if(<br />
            strpos( $url, &#8220;:&#8221; ) === false<br />
            &amp;&amp; substr( $url, 0, 1 ) != &#8220;/&#8221;<br />
            &amp;&amp; !preg_match( &#8220;|^[a-z0-9-]+?.php|i&#8221;, $url )<br />
        ) {<br />
            $url = &#8220;http://{$url}&/#8221;;<br />
        }</p>
<p>        // Replace ampersans and single quotes<br />
        $url = preg_replace( &#8220;|&amp;([^#])(?![a-z]{2,8};)|&#8221;, &#8220;&#038;$1&#8221;, $url );<br />
        $url = str_replace( &#8220;&#8216;&#8221;, &#8220;&#039;&#8221;, $url );</p>
<p>        return $url;<br />
    }</p>
<p>    public function transform( $text ) {<br />
        $text = &#8221; {$text}&#8221;;</p>
<p>        $text = preg_replace_callback(<br />
            &#8216;#(?])(()?([w]+?://(?:[wx80-xff#$%&amp;~/-=?@[](+]|[.,;:](?![s&lt;])|(?(1))(?![s&lt;])|)))*)#is&#039;,<br />
            array( &#039;MakeItLink&#039;, &#039;_link_www&#039; ),<br />
            $text<br />
        );</p>
<p>        $text = preg_replace( &#039;#(<a>]+?&gt;|&gt;))<a>]+?&gt;([^&gt;]+?)</a></a>#i&#8217;, &#8220;$1$3</a>&#8220;, $text );<br />
        $text = trim( $text );</p>
<p>        return $text;<br />
    }<br />
}<br />
[/sourcecode]</p>
<p>It&#8217;s very easy to use, just load up the text you want to search for link and call the transform method:</p>
<p>[sourcecode language=&#8221;php&#8221;]<br />
$text = MakeItLink::transform( $text );<br />
[/sourcecode]</p>
<p>All of this code came out of WordPress, which is licensed under the <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html">GPL</a>, so consider the MakeItLink code GPL as well.  If you&#8217;ve got some improvements let me know and make sure that it gets back into the original WordPress functions as well.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2008/11/28/makeitlink-detecting-urls-in-text-and-making-them-links/feed/</wfw:commentRss>
			<slash:comments>13</slash:comments>
		
		
			</item>
	</channel>
</rss>

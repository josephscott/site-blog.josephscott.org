<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>nodejs &#8211; Joseph Scott</title>
	<atom:link href="/tag/nodejs/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Tue, 23 Oct 2018 17:02:43 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>The Best Way To Install Node.js</title>
		<link>/2018/10/23/the-best-way-to-install-node-js/</link>
					<comments>/2018/10/23/the-best-way-to-install-node-js/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Tue, 23 Oct 2018 17:02:43 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[nodejs]]></category>
		<guid isPermaLink="false">/?p=17078</guid>

					<description><![CDATA[The best method for installing Node.js I&#8217;ve found so far is with n-install. Don&#8217;t do the curl pipe bash thing! Download the script, then run it. That gets you to the point of being able to run a locally scoped version of n, the Node.js version manager, without having to install Node.js first. By default [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>The best method for installing Node.js I&#8217;ve found so far is with <a href="https://github.com/mklement0/n-install">n-install</a>.</p>
<p><strong style="font-size: 150%;">Don&#8217;t do the curl pipe bash thing!  Download the script, then run it.</strong></p>
<p>That gets you to the point of being able to run a locally scoped version of <a href="https://github.com/tj/n">n</a>, the Node.js version manager, without having to install Node.js first.</p>
<p>By default it keeps everything in <code>~/n</code>, which makes it very easy to nuke and start over if it all goes completely off the rails.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2018/10/23/the-best-way-to-install-node-js/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>NPM As A Blocker</title>
		<link>/2014/03/21/npm-blocker/</link>
					<comments>/2014/03/21/npm-blocker/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Fri, 21 Mar 2014 18:06:42 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[box]]></category>
		<category><![CDATA[nodejs]]></category>
		<category><![CDATA[npm]]></category>
		<guid isPermaLink="false">https://josephscott.org/?p=10081</guid>

					<description><![CDATA[From Handling Node.js Dependencies At Box: We would have a lot of explaining to do if a deployment ended up canceled because the public npm registry was down. &#8230; The most important requirement in this regard is deploying without dependence on the public npm registry. I&#8217;ve brought up this issue in just about every conversation [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>From <a href='http://tech.blog.box.com/2014/03/handling-node-js-dependencies-at-box/' title="Nice to see public threads addressing this issue.">Handling Node.js Dependencies At Box</a>:</p>
<blockquote><p>
We would have a lot of explaining to do if a deployment ended up canceled because the public npm registry was down.</p>
<p>&#8230;</p>
<p>The most important requirement in this regard is deploying without dependence on the public npm registry.
</p></blockquote>
<p>I&#8217;ve brought up this issue in just about every conversation I&#8217;ve had with people about NPM.  What happens when  the registry goes down or is unavailable for any reason?  If your deploy mechanism is dependent on the registry being up, it is going to cause a whole lot of pain.  And you know that will wait to happen until the worst possible moment.</p>
<p>I am surprised at the number of times people seem to have not considered that an issue.</p>
<p>Here is the bottom line, from the same post &#8211;</p>
<blockquote><p>
At any given time, whatâ€™s checked-in to source control is ready to be deployed into production on its own.
</p></blockquote>
<p>I&#8217;ve described it this way: <strong>if it is code that you depend on in production then it should be in your source control repo</strong>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/03/21/npm-blocker/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Is Meteor The Future Of Node.JS Development?</title>
		<link>/2012/04/12/is-meteor-the-future-of-node-js-development/</link>
					<comments>/2012/04/12/is-meteor-the-future-of-node-js-development/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 12 Apr 2012 16:29:13 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[meteor]]></category>
		<category><![CDATA[nodejs]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=5709</guid>

					<description><![CDATA[What does the next step in the evolution of Node.js look like? One answer to that question is Meteor. I found their screencast very interesting: The idea of having a built-in framework that takes care of updates for you, on the fly, is compelling. I also liked the example of being able to work with [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>What does the next step in the evolution of <a href="http://nodejs.org/">Node.js</a> look like?  One answer to that question is <a href='http://www.meteor.com/'>Meteor</a>.  I found their <a href="http://www.meteor.com/screencast">screencast</a> very interesting:</p>
<p><iframe loading="lazy" src="http://player.vimeo.com/video/40104996?title=0&amp;byline=0&amp;portrait=0" width="600" height="450" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>
<p>The idea of having a built-in framework that takes care of updates for you, on the fly, is compelling.  I also liked the example of being able to work with the MongoDB data right from the client (that also scares me).</p>
<p>I&#8217;m not ready to abandon all other web development platforms and move strictly to Meteor, but I&#8217;ll definitely be watching it.  I&#8217;d like to dig deeper into the details of what makes Meteor tick. </p>
]]></content:encoded>
					
					<wfw:commentRss>/2012/04/12/is-meteor-the-future-of-node-js-development/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Live Updating a Node.js Web Server</title>
		<link>/2012/03/14/live-updating-a-node-js-web-server/</link>
					<comments>/2012/03/14/live-updating-a-node-js-web-server/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 14 Mar 2012 15:30:18 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[nodejs]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=5534</guid>

					<description><![CDATA[Each time I look at Node.JS the issue of live updating comes up. For PHP it is easy to take live updating for granted. You update your .php files and *poof* your site is running the new code. With the merged web server model of Node.JS that doesn&#8217;t happen. I&#8217;m happy to see some folks [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Each time I look at <a href="http://nodejs.org/">Node.JS</a> the issue of live updating comes up.  For PHP it is easy to take live updating for granted.  You update your .php files and *poof* your site is running the new code.  With the merged web server model of Node.JS that doesn&#8217;t happen.</p>
<p>I&#8217;m happy to see some folks thinking along these same lines.  From <a href="http://www.devthought.com/2012/01/29/staying-up-with-node-js/">Staying up with Node.JS</a>:</p>
<blockquote><p>
To many beginner Node.JS users, a fundamental and immediate apparent disadvantage of writing their web applications with Node.JS lies in the inability to save a file, refresh the browser and see their changes live.
</p></blockquote>
<p>This isn&#8217;t just a beginner issue though, it make deploying to production much more complex as well:</p>
<blockquote><p>
The need for seamless code reloads extends into the realm of production deployment as well: one needs to be able to serve new requests with fresh code immediately, without breaking existing ones (such as file uploads or content transfer).
</p></blockquote>
<p>To deal with these issues LearnBoost has developed two projects: <a href="https://github.com/learnboost/distribute">distribute</a> and <a href="https://github.com/learnboost/up">up</a>.</p>
<p>Another option that has been brought up is <a href="https://github.com/saschagehlich/hotnode">hotnode</a>, which looks like a fairly simple approach.  In general the fewer moving parts the better.</p>
<p>If you are using Node.JS for production services, what approach do you use for deploying updates?  Are you doing a load balancer and worker dance (spin up new worker, add it to load balancer pool, drop out an older worker, update it, add it back to the pool) or have you come up with a live update method?</p>
]]></content:encoded>
					
					<wfw:commentRss>/2012/03/14/live-updating-a-node-js-web-server/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>

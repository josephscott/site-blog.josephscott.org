<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>apache &#8211; Joseph Scott</title>
	<atom:link href="/tag/apache/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Wed, 12 Oct 2011 15:29:40 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<atom:link rel='hub' href='/?pushpress=hub'/>
	<item>
		<title>Apache FallbackResource Directive</title>
		<link>/2011/10/12/apache-fallbackresource-directive/</link>
					<comments>/2011/10/12/apache-fallbackresource-directive/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 12 Oct 2011 15:29:40 +0000</pubDate>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[fallbackresource]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=4918</guid>

					<description><![CDATA[As of Apache HTTPD 2.2.16 there is a new FallbackResource directive: It is frequently desirable to have a single file or resource handle all requests to a particular directory, except those requests that correspond to an existing file or script. This is often referred to as a &#8216;front controller.&#8217; In earlier versions of httpd, this [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As of <a href="http://httpd.apache.org/">Apache HTTPD</a> 2.2.16 there is a new <a href="http://httpd.apache.org/docs/current/mod/mod_dir.html#fallbackresource">FallbackResource directive</a>:</p>
<blockquote><p>
It is frequently desirable to have a single file or resource handle all requests to a particular directory, except those requests that correspond to an existing file or script. This is often referred to as a &#8216;front controller.&#8217;</p>
<p>In earlier versions of httpd, this effect typically required mod_rewrite, and the use of the -f and -d tests for file and directory existence. This now requires only one line of configuration.</p>
<p><code>FallbackResource /index.php</code></p>
<p>Existing files, such as images, css files, and so on, will be served normally.
</p></blockquote>
<p>This is a really useful directive to have available, reminds me of the <a href="http://wiki.nginx.org/HttpCoreModule#try_files">try_files feature in Nginx</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2011/10/12/apache-fallbackresource-directive/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>mod_pagespeed for Apache</title>
		<link>/2010/11/11/mod_pagespeed-for-apache/</link>
					<comments>/2010/11/11/mod_pagespeed-for-apache/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Thu, 11 Nov 2010 16:28:09 +0000</pubDate>
				<category><![CDATA[Asides]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[google]]></category>
		<category><![CDATA[mod-pagespeed]]></category>
		<guid isPermaLink="false">http://josephscott.org/?p=3110</guid>

					<description><![CDATA[mod_pagespeed is an open-source Apache module that automatically optimizes web pages and resources on them. It does this by rewriting the resources using filters that implement web performance best practices. Webmasters and web developers can use mod_pagespeed to improve the performance of their web pages when serving content with the Apache HTTP Server. via mod_pagespeed [&#8230;]]]></description>
										<content:encoded><![CDATA[<blockquote><p>mod_pagespeed is an open-source Apache module that automatically optimizes web pages and resources on them. It does this by rewriting the resources using filters that implement web performance best practices. Webmasters and web developers can use mod_pagespeed to improve the performance of their web pages when serving content with the Apache HTTP Server.</p></blockquote>
<p>via <a href='http://code.google.com/speed/page-speed/docs/module.html'>mod_pagespeed Overview</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2010/11/11/mod_pagespeed-for-apache/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>HTTP Basic Authentication, A Tale of AtomPub, WordPress, PHP, Apache, CGI and SSL/TLS</title>
		<link>/2007/09/19/http-basic-authentication-a-tale-of-atompub-wordpress-php-apache-cgi-and-ssltls/</link>
					<comments>/2007/09/19/http-basic-authentication-a-tale-of-atompub-wordpress-php-apache-cgi-and-ssltls/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Wed, 19 Sep 2007 18:00:32 +0000</pubDate>
				<category><![CDATA[josephscott]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[atompub]]></category>
		<category><![CDATA[basicauthentication]]></category>
		<category><![CDATA[cgi]]></category>
		<category><![CDATA[http]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[ssl]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2007/09/19/http-basic-authentication-a-tale-of-atompub-wordpress-php-apache-cgi-and-ssltls/</guid>

					<description><![CDATA[I&#8217;ve been really enjoying working with Tim Bray, Pete Lacey, Elias Torres and Sam Ruby on improving AtomPub in WordPress. This work is in WordPress 2.3, which will be released later this month. You can try it out right now by downloading the beta. Sam has also started some documentation on AtomPub in WordPress at [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve been really enjoying working with <a href="http://www.tbray.org/ongoing/">Tim Bray</a>, <a href="http://wanderingbarque.com/nonintersecting/">Pete Lacey</a>, <a href="http://torrez.us/">Elias Torres</a> and <a href="http://intertwingly.net/blog/">Sam Ruby</a> on improving AtomPub in WordPress.  This work is in WordPress 2.3, which will be released later this month.  You can try it out right now by downloading <a href="http://wordpress.org/development/2007/09/wordpress-23-beta-3/">the beta</a>.  Sam has also started some documentation on AtomPub in WordPress at <a href="http://codex.wordpress.org/AtomPub">http://codex.wordpress.org/AtomPub</a>.</p>
<p>There is a lot of ground to cover in the post so to start with I want to distinguish between two topics that are closely related, but for our purposes today are also separate and distinct from each other.  The first is authentication, specifically <a href="http://tools.ietf.org/html/rfc2617">HTTP Basic Authentication</a>.  The second is security, which will focus on <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security">SSL/TLS</a> (i.e. using https:// URLs).</p>
<p>To start with, the <a href="http://bitworking.org/projects/atom/draft-ietf-atompub-protocol-17.html">AtomPub spec</a> has a section on <a href="http://bitworking.org/projects/atom/draft-ietf-atompub-protocol-17.html#rfc.section.14">Securing the Atom Publishing Protocol</a> that deals with authentication.  In general, you can use nothing or what ever you want, but HTTP Basic Authentication with TLS needs to be able to work.  Think of it as HTTP Basic Authentication being the lowest common denominator that AtomPub clients and servers have to support, along with TLS if you&#8217;d like.</p>
<p>In WordPress there are actually two ways that a user could be authenticated when using AtomPub, HTTP basic and cookies.  The cookie mechanism just looks to see if you sent along an authenticated WordPress cookie with your request.  Since we&#8217;d been using Tim&#8217;s <a href="http://www.tbray.org/ape/">Atom Protocol Exerciser (APE)</a> for testing, all authentication was being done via HTTP basic.  Which worked fine, most of the time.</p>
<p>I started running APE against WordPress running under different situations and I ran into a problem with authentication when PHP was being run as a CGI under Apache.  When running as a server module (mod_php) PHP takes care of decoding HTTP basic for you (see <a href="http://us3.php.net/features.http-auth">HTTP basic authentication in PHP</a>).  When a using HTTP basic PHP will automatically populate $_SERVER[&#8216;PHP_AUTH_USER&#8217;] and $_SERVER[&#8216;PHP_AUTH_PW&#8217;] variables with the username and password that were provided.  IF and ONLY IF PHP is being run as a server module (like mod_php).  If you are running PHP as a CGI then those two variables won&#8217;t get created at all, ever, even when using HTTP basic authentication.  And since you can&#8217;t do anything in WordPress via AtomPub without authenticating you are dead in the water.  Well, not exactly.</p>
<p>PHP not supporting HTTP basic auth when being run as a CGI is a known issue, so folks have come up with clever work ways to work around this.  One common work around is to <a href="http://www.besthostratings.com/articles/http-auth-php-cgi.html">use mod_rewrite to add HTTP basic auth into $_SERVER[&#8216;HTTP_AUTHORIZATION&#8217;]</a>:</p>
<p><code></p>
<pre>
RewriteEngine on
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]
</pre>
<p></code></p>
<p>The idea here is that mod_rewrite watches for an HTTP basic auth attempt and then injects the HTTP header in to the PHP environment as HTTP_AUTHORIZATION.  From there is it an easy job of parsing and decoding the HTTP header and manually populating $_SERVER[&#8216;PHP_AUTH_USER&#8217;] and $_SERVER[&#8216;PHP_AUTH_PW&#8217;] yourself.  This is currently being done in the WordPress AtomPub code, so if you are on a host that runs PHP as a CGI and you have access to .htaccess and mod_rewrite then you can try it out.</p>
<p>Unfortunately I&#8217;ve seen times where this doesn&#8217;t work either.  A modified version of this that I&#8217;ve had better success with is to pass the authentication back in via GET.  Here&#8217;s an example from a test WordPress blog that redirects AtomPub authentication:</p>
<p><code></p>
<pre>
RewriteEngine on
RewriteBase /test/atompub/
RewriteCond %{HTTP:Authorization}  !^$
RewriteRule wp-app.php wp-app.php?HTTP_AUTHORIZATION=%{HTTP:Authorization} [QSA,L]
</pre>
<p></code></p>
<p>Instead of parsing and decoding from $_SERVER[&#8216;HTTP_AUTHORIZATION&#8217;] you would do it from $_GET[&#8216;HTTP_AUTHORIZATION&#8217;].  This isn&#8217;t exactly ideal either, but I&#8217;ve had better luck getting it to work in PHP as a CGI environments.  Code to support this isn&#8217;t in WordPress AtomPub yet, but we might add it.</p>
<p>The four of us went back and forth on this a bit then Tim Bray asked the elephant in the room question: why doesn&#8217;t PHP support HTTP basic when running as a CGI?  I didn&#8217;t have a good answer for him, so I went hunting on Google.  It turns out that this has nothing to do with PHP, it is how Apache works.  Apache does not pass the HTTP basic headers to CGI applications, so they never see them.  This has been mentioned in several places, for brevity I&#8217;ll only quote one, from Jon Udell talking about CGI and mod_perl:</p>
<p><a href="http://www.byte.com/art/9801/sec7/art1.htm">HTTP Authentication</a></p>
<blockquote><p>
&#8220;Note that such a module has complete access to the HTTP headers sent by the client. If you write a CGI script to enforce a security policy, à la the ByteCal example above, that script will normally see only the user&#8217;s name (HTTP_REMOTE_USER) and not the full credentials (HTTP_AUTHORIZATION).</p>
<p>That&#8217;s because Apache, as a security measure, withholds the Authorization header from CGI scripts. (If you really want to build a CGI-based access-control script, you can tweak Apache to make it send this header.) But an Apache/Perl authentication module, running inside the server, knows everything that Apache knows about a request.&#8221;
</p></blockquote>
<p>So far I&#8217;ve used WordPress and AtomPub as an example, but this problem is not specific to either.  This is an issue with CGI applications being able to use HTTP basic authentication, and the ways people have worked around it.  While there are ways to deal with this (like the two I mentioned above), they aren&#8217;t ideal and only work if you can use .htaccess and mod_rewrite.</p>
<p>There have been lots of alternatives to authentication that get around this issue.  Lots of people have looked at this, hopefully we&#8217;ll have a generalized way of dealing with this at some point.  Until then it looks like we&#8217;ll see API specific variations of authentication.</p>
<p>Ok, I also mentioned that we&#8217;d talk about security.  This one is more to the point, if you aren&#8217;t using SSL/TLS then your communications aren&#8217;t secure.  Although HTTP basic doesn&#8217;t send your plain text password and username, it is the next best thing (base64 encoded).  So anyone with access to your traffic (wireless network sniffing anyone?) can easily grab your username and password.  So how do you secure this authentication process?  By doing it over SSL/TLS. If your web traffic isn&#8217;t using SSL/TLS it isn&#8217;t secure.</p>
<p>In the context of WordPress there is a trade off here.  We can&#8217;t guarantee that every WordPress install is going to support SSL/TLS, so we can&#8217;t make it a requirement.  That said, there is nothing in WordPress (or the APIs: AtomPub and XML-RPC) that prevent you being able to use SSL/TLS.  This leaves it up the person running the WordPress blog to decide what level of security is needed.</p>
<p>On WordPress.com we support TLS/SSL.  You can point your XML-RPC client at https://&lt;your_blog_here&gt;.wordpress.com/xmlrpc.php and it will encrypt the data back and forth between your computer and WordPress.com servers.  Same for AtomPub, only the URL would look like https://&lt;your_blog_here&gt;.wordpress.com/wp-app.php.</p>
<p>Hopefully everyone takes away two things from this.  One, you can&#8217;t depend on HTTP basic authentication working.  Two, if you aren&#8217;t using SSL/TLS then your traffic isn&#8217;t secure.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2007/09/19/http-basic-authentication-a-tale-of-atompub-wordpress-php-apache-cgi-and-ssltls/feed/</wfw:commentRss>
			<slash:comments>32</slash:comments>
		
		
			</item>
		<item>
		<title>Pleasant URLs in PHP</title>
		<link>/2006/07/10/pleasant-urls-in-php/</link>
					<comments>/2006/07/10/pleasant-urls-in-php/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Mon, 10 Jul 2006 19:03:16 +0000</pubDate>
				<category><![CDATA[josephscott]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[mod_rewrite]]></category>
		<category><![CDATA[PHP]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2006/07/10/pleasant-urls-in-php/</guid>

					<description><![CDATA[phpRiot.com posted a new article on creating search engine friendly URLs in PHP. I always like to see this topic get attention, there are too many sites on the web that generate very long and difficult to read URLs. Usually this involves transforming GET parameters into part of the URL. Here is an example of [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.phpriot.com/">phpRiot.com</a> posted a new article on <a href="http://www.phpriot.com/d/articles/php/application-design/search-engine-urls/index.html">creating search engine friendly URLs in PHP</a>.  I always like to see this topic get attention, there are too many sites on the web that generate very long and difficult to read URLs.  Usually this involves transforming GET parameters into part of the URL.  Here is an example of a URL using GET parameters:<br />
<code><br />
http://www.example.com/articles/?post_id=987654321<br />
</code><br />
Here is an example using a more pleasant URL:<br />
<code><br />
http://www.example.com/articles/title/nice-php-urls<br />
</code><br />
The phpRiot article goes on to describe different methods for achieving this.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2006/07/10/pleasant-urls-in-php/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>PHP, But Only When Needed</title>
		<link>/2006/07/10/php-but-only-when-needed/</link>
					<comments>/2006/07/10/php-but-only-when-needed/#respond</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Mon, 10 Jul 2006 19:01:36 +0000</pubDate>
				<category><![CDATA[josephscott]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[mod_rewrite]]></category>
		<category><![CDATA[PHP]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2006/07/10/php-but-only-when-needed/</guid>

					<description><![CDATA[There are times when you only want to have your PHP scripts run when certain conditions have (or haven&#8217;t) been met. This technique is often used for caching. A real life example of this is discussed in Serving rendered images at the speed of light. The gist of the story is that a PHP script [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>There are times when you only want to have your PHP scripts run when certain conditions have (or haven&#8217;t) been met.  This technique is often used for caching.  A real life example of this is discussed in <a href="http://www.svdgraaf.nl/2006/01/12/serving-rendered-images-at-the-speed-of-light/">Serving rendered images at the speed of light</a>.  The gist of the story is that a PHP script is used to generate thumbnails of images, but it only needs to be called when a thumbnail doesn&#8217;t already exist.</p>
<p>The described solution involved making use of <a href="http://httpd.apache.org/">Apache</a>&#8216;s <a href="http://httpd.apache.org/docs/1.3/mod/mod_rewrite.html">mod_rewrite</a>, so this isn&#8217;t a purely PHP solution.  If you aren&#8217;t already familiar with mod_rewrite that is okay (I&#8217;ve used and it is still quite confusing at times), the author covers each step one at a time.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2006/07/10/php-but-only-when-needed/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The BSD Licensed Application STack (BLAST)</title>
		<link>/2006/02/14/the-bsd-licensed-application-stack-blast/</link>
					<comments>/2006/02/14/the-bsd-licensed-application-stack-blast/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Tue, 14 Feb 2006 22:25:10 +0000</pubDate>
				<category><![CDATA[josephscott]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[blast]]></category>
		<category><![CDATA[FreeBSD]]></category>
		<category><![CDATA[lamp]]></category>
		<category><![CDATA[license]]></category>
		<category><![CDATA[opensource]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[PostgreSQL]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/archives/2006/02/14/the-bsd-licensed-application-stack-blast/</guid>

					<description><![CDATA[There are a lot of open source licenses out there. For me open source license usually implies GPL, LGPL and BSD/MIT, although there are over 50 on the OSI&#8216;s list. I tend to be partial towards the BSD/MIT licenses over (L)GPL, I&#8217;ve mentioned this before. For the purposes of this article thought, I&#8217;m going to [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>There are a lot of <a href="http://www.opensource.org/licenses/">open source licenses</a> out there.  For me open source license usually implies <a href="http://www.opensource.org/licenses/gpl-license.php">GPL</a>, <a href="http://www.opensource.org/licenses/lgpl-license.php">LGPL</a> and <a href="http://www.opensource.org/licenses/bsd-license.php">BSD</a>/<a href="http://www.opensource.org/licenses/mit-license.html">MIT</a>, although there are over 50 on the <a href="http://www.opensource.org/index.php">OSI</a>&#8216;s list.  I tend to be partial towards the BSD/MIT licenses over (L)GPL, I&#8217;ve mentioned this before.  For the purposes of this article thought, I&#8217;m going to focus on BSD licensed software.  Don&#8217;t take this as a slam against the GPL, I just wanted to focus on the largest amount of flexibility and ease for developers.</p>
<p>It really is amazing that today you can develop an entire application or service using BSD licensed software up and down the stack.  This particular license allows you to modify code and it is up to you if you want to share it.  Although it is always recommended to participate in the community, this license doesn&#8217;t make it a requirement if you want to distribute modified code (this may be a good or a bad thing depending on your point of view).  Thus all types of applications and services can be built upon BSD licensed code, from top to bottom.  If you&#8217;ve ever tried to figure out which license you have to buy from a company that offers more types of licenses than cars on the road you know that not having to go through that maze can be a great time saver.</p>
<p>So here is what I&#8217;m thinking of when I talk about the BSD licensed application stack.  At the lowest level we need an operating system.  I prefer <a href="http://www.freebsd.org/">FreeBSD</a> for this, but there is no reason why <a href="http://www.netbsd.org/">NetBSD</a>, <a href="http://www.openbsd.org/">OpenBSD</a> or <a href="http://www.dragonflybsd.org/">DragonFly BSD</a> couldn&#8217;t be used instead.  Any of these will provide a complete operating system and depending on your wants or needs you may find one fits you better than the others.</p>
<p>Now that we have an OS (FreeBSD), we&#8217;ll need some place to store data that our application or service will be using.  SQL databases have grown to fit this need quite well.  Because we are focusing on BSD licensed open source software one database really stands above the rest, <a href="http://www.postgresql.org/">PostgreSQL</a>.  Not only is it a perfect fit for our criteria, it is a great piece database software.  PostgreSQL supports many features that users of commercial databases have come to expect (Views, Functions, Schemas, etc).</p>
<p>The way to deploy applications and or services today is on the web.  Here again we are fortunate because the most commonly used web server is open source and BSD licensed.  The <a href="http://httpd.apache.org/">Apache web server</a> is flexible (<a href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html">mod_rewrite</a> anyone?) and powerful.</p>
<p>Finally we&#8217;ll need an a programming license to get things done.  This one piece of the stack is probably the most difficult to pin down.  My pick though would have to be <a href="http://www.php.net/">PHP</a>, whose <a href="http://cvs.php.net/viewcvs.cgi/php-src/LICENSE?view=markup&amp;rev=1.21.16.1">license</a> is close to the BSD license.  It is also targeted at for web apps, but I&#8217;ve used it for command line applications as well.</p>
<p>The BSD Licensed Application STack (BLAST) is about software that does its job well and has a license that is easy to understand and gives you the ability to get distributed changes to yourself.  Activity in the community is optional, but encouraged.  For me this means FreeBSD, PostgreSQL, Apache and PHP.</p>
<p>Many of you reading this will be jumping up and down that this is just a rehash of <a href="http://en.wikipedia.org/wiki/L.A.M.P">L.A.M.P.</a>.  On one level this is true, Linux, Apache, MySQL and PHP/Perl (L.A.M.P.) do satisfy one part of BLAST, open source software that gets the job done.  Unfortunately the licensing for some of these products is difficult to understand and in some cases the same license is interpreted in different ways (yes MySQL I&#8217;m looking at you).</p>
<p>The components of BLAST may change over time, (perhaps another language besides PHP?) but the intent and abilities will be the same.  Good open source code with ability to do what you want with it.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2006/02/14/the-bsd-licensed-application-stack-blast/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Reverse Proxy With Apache</title>
		<link>/2005/07/05/reverse-proxy-with-apache/</link>
					<comments>/2005/07/05/reverse-proxy-with-apache/#comments</comments>
		
		<dc:creator><![CDATA[josephscott]]></dc:creator>
		<pubDate>Tue, 05 Jul 2005 23:21:23 +0000</pubDate>
				<category><![CDATA[josephscott]]></category>
		<category><![CDATA[apache]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[reverseproxy]]></category>
		<category><![CDATA[squirrelmail]]></category>
		<guid isPermaLink="false">http://joseph.randomnetworks.com/?p=427</guid>

					<description><![CDATA[I&#8217;ve wanted to get all of our web servers at work under one umbrella in a reverse proxy setup for some time. I wanted this so that I could expose only one web server to the outside world (some of this has to do with network topology that is beyond my control), allowing me make [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve wanted to get all of our web servers at work under one umbrella in a reverse proxy setup for some time.  I wanted this so that I could expose only one web server to the outside world (some of this has to do with network topology that is beyond my control), allowing me make all of our web services available under one URL (nice for things like SSL and multiple URL rewriting) and making it possible to filter web requests at one place.  Today I finally sat down with the intent to make it work and plan for the switch over.</p>
<p>In the past I&#8217;d looked at doing this with <a href="http://www.apsis.ch/pound/">Pound</a>, but it fell short in one key area, URL rewriting.  Everything else I needed was already there, in one convenient spot.  I really wanted this to work, but in the end I couldn&#8217;t give up URL rewriting, it&#8217;s a requirement for what I&#8217;m trying to accomplish.  I also looked at <a href="http://www.squid-cache.org/">Squid</a> for a time.  Honestly I didn&#8217;t complete my trial of Squid, it is possible that it might me all of my requirements, but I didn&#8217;t see anything that looked like <a href="http://www.modsecurity.org/">mod_security</a> for Squid.  That was another needed feature, I&#8217;m trying to protect IIS servers so I wanted all the extra help I could get.</p>
<p>So I eventually ended up at <a href="http://httpd.apache.org/">Apache</a>, with mod_proxy.  With the help of <a href="http://www.apacheweek.com/features/reverseproxies">this how to article</a> things went pretty smoothly.  Until I tried to bring the server hosting our <a href="http://www.squirrelmail.org/">Squirrelmail</a> install.  No matter what I tried I could get to successfully login.  Suspecting that this had to with cookies being based between the client, proxy and server I went hunting for web on the web.  Turns out the how to article above mentions a couple of proxy directives for dealing with this, <a href="http://httpd.apache.org/docs-2.1/mod/mod_proxy.html#proxypassreversecookiedomain">ProxyPassReverseCookieDomain</a> and <a href="http://httpd.apache.org/docs-2.1/mod/mod_proxy.html#proxypassreversecookiepath">ProxyPassReverseCookiePath</a>.  Unfortunately these are only available in the development version of Apache, version 2.1.  I&#8217;d spent the better part day of the tweaking my install of Apache 2.0.54 and then had to go build Apache 2.1.x to get the newer version mod_proxy.  Some of the module names have changed so I couldn&#8217;t just drop in my previous Apache config.  I also had to rebuild the <a href="http://apache.webthing.com/mod_proxy_html/">mod_proxy_html</a> and mod_security modules for Apache 2.1.x.</p>
<p>The good news is that once I had that all sorted out the new proxy cookie directives did the trick.  So here is my little public service announcement (PSA), if you are using mod_proxy as a reverse proxy for Squirrelmail, start with Apache 2.1.x and look into ProxyPassReverseCookieDomain and ProxyPassReverseCookiePath.  I suspect this will be the case for any webapp that uses cookies.</p>
<p>I haven&#8217;t added mod_security and SSL to the mix yet, but I&#8217;m already familiar with those modules, so I don&#8217;t expect that to be too bad.  I&#8217;d never really used mod_proxy as a reverse proxy before so this was some what new territory to me.  Oh, at some point I&#8217;ll look doing some caching in combination with reverse proxy to minimize the load on the back end web servers.</p>
<p><strong>UPDATE 10:45am 6 Jul 2005:</strong>: I should have mentioned the trailing slash problem also shows up in the reverse proxy setup.  So if you have a reverse mapping that looks something like:</p>
<blockquote><p><code>ProxyPass /webmail/ http://192.168.1.10/webmail/</code></p></blockquote>
<p> then you can use mod_rewrite to send a redirect with the trailing slash:</p>
<blockquote><p><code>RewriteRule ^/webmail$ webmail/ [R]</code></p></blockquote>
]]></content:encoded>
					
					<wfw:commentRss>/2005/07/05/reverse-proxy-with-apache/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
